// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.shenming.sms.dc.sql2java;

// imports+ 

// imports- 

/**
 * SmTbLeaveAttchementBean is a mapping of sm_tb_leave_attchement Table.
*/
public class SmTbLeaveAttchementBean
// extends+ 

// extends- 
{

    private Long applyId;
    private boolean applyId_is_modified = false;
    private boolean applyId_is_initialized = false;


    private String filePath;
    private boolean filePath_is_modified = false;
    private boolean filePath_is_initialized = false;


    private String fileName;
    private boolean fileName_is_modified = false;
    private boolean fileName_is_initialized = false;


    private String description;
    private boolean description_is_modified = false;
    private boolean description_is_initialized = false;


    private java.util.Date createDate;
    private boolean createDate_is_modified = false;
    private boolean createDate_is_initialized = false;

    private boolean _isNew = true;

    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    SmTbLeaveAttchementBean()
    {
    }

    /**
     * Getter method for applyId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_tb_leave_attchement.apply_id
     * <li>column size: 19
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of applyId
     */
    public Long getApplyId()
    {
        return applyId;
    }

    /**
     * Setter method for applyId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to applyId
     */
    public void setApplyId(Long newVal) {
        if ((newVal != null && this.applyId != null && (newVal.compareTo(this.applyId) == 0)) ||
            (newVal == null && this.applyId == null && applyId_is_initialized)) {
            return;
        }
        this.applyId = newVal;
        applyId_is_modified = true;
        applyId_is_initialized = true;
    }

    /**
     * Setter method for applyId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to applyId
     */
    public void setApplyId(long newVal) {
        setApplyId(new Long(newVal));
    }

    /**
     * Determines if the applyId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isApplyIdModified() {
        return applyId_is_modified;
    }

    /**
     * Determines if the applyId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isApplyIdInitialized() {
        return applyId_is_initialized;
    }

    /**
     * Getter method for filePath.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_tb_leave_attchement.file_path
     * <li>column size: 256
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of filePath
     */
    public String getFilePath()
    {
        return filePath;
    }

    /**
     * Setter method for filePath.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to filePath
     */
    public void setFilePath(String newVal) {
        if ((newVal != null && this.filePath != null && (newVal.compareTo(this.filePath) == 0)) ||
            (newVal == null && this.filePath == null && filePath_is_initialized)) {
            return;
        }
        this.filePath = newVal;
        filePath_is_modified = true;
        filePath_is_initialized = true;
    }

    /**
     * Determines if the filePath has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFilePathModified() {
        return filePath_is_modified;
    }

    /**
     * Determines if the filePath has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFilePathInitialized() {
        return filePath_is_initialized;
    }

    /**
     * Getter method for fileName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_tb_leave_attchement.file_name
     * <li>column size: 32
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of fileName
     */
    public String getFileName()
    {
        return fileName;
    }

    /**
     * Setter method for fileName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to fileName
     */
    public void setFileName(String newVal) {
        if ((newVal != null && this.fileName != null && (newVal.compareTo(this.fileName) == 0)) ||
            (newVal == null && this.fileName == null && fileName_is_initialized)) {
            return;
        }
        this.fileName = newVal;
        fileName_is_modified = true;
        fileName_is_initialized = true;
    }

    /**
     * Determines if the fileName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFileNameModified() {
        return fileName_is_modified;
    }

    /**
     * Determines if the fileName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFileNameInitialized() {
        return fileName_is_initialized;
    }

    /**
     * Getter method for description.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_tb_leave_attchement.description
     * <li>column size: 256
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of description
     */
    public String getDescription()
    {
        return description;
    }

    /**
     * Setter method for description.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to description
     */
    public void setDescription(String newVal) {
        if ((newVal != null && this.description != null && (newVal.compareTo(this.description) == 0)) ||
            (newVal == null && this.description == null && description_is_initialized)) {
            return;
        }
        this.description = newVal;
        description_is_modified = true;
        description_is_initialized = true;
    }

    /**
     * Determines if the description has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDescriptionModified() {
        return description_is_modified;
    }

    /**
     * Determines if the description has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDescriptionInitialized() {
        return description_is_initialized;
    }

    /**
     * Getter method for createDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_tb_leave_attchement.create_date
     * <li>column size: 0
     * <li>jdbc type returned by the driver: Types.DATE
     * </ul>
     *
     * @return the value of createDate
     */
    public java.util.Date getCreateDate()
    {
        return createDate;
    }

    /**
     * Setter method for createDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to createDate
     */
    public void setCreateDate(java.util.Date newVal) {
        if ((newVal != null && this.createDate != null && (newVal.compareTo(this.createDate) == 0)) ||
            (newVal == null && this.createDate == null && createDate_is_initialized)) {
            return;
        }
        this.createDate = newVal;
        createDate_is_modified = true;
        createDate_is_initialized = true;
    }

    /**
     * Setter method for createDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to createDate
     */
    public void setCreateDate(long newVal) {
        setCreateDate(new java.util.Date(newVal));
    }

    /**
     * Determines if the createDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCreateDateModified() {
        return createDate_is_modified;
    }

    /**
     * Determines if the createDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCreateDateInitialized() {
        return createDate_is_initialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return applyId_is_modified ||
		filePath_is_modified ||
		fileName_is_modified ||
		description_is_modified ||
		createDate_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        applyId_is_modified = false;
        filePath_is_modified = false;
        fileName_is_modified = false;
        description_is_modified = false;
        createDate_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(SmTbLeaveAttchementBean bean) {
        setApplyId(bean.getApplyId());
        setFilePath(bean.getFilePath());
        setFileName(bean.getFileName());
        setDescription(bean.getDescription());
        setCreateDate(bean.getCreateDate());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[sm_tb_leave_attchement] "
                 + "\n - sm_tb_leave_attchement.apply_id = " + (applyId_is_initialized ? ("[" + (applyId == null ? null : applyId.toString()) + "]") : "not initialized") + ""
                 + "\n - sm_tb_leave_attchement.file_path = " + (filePath_is_initialized ? ("[" + (filePath == null ? null : filePath.toString()) + "]") : "not initialized") + ""
                 + "\n - sm_tb_leave_attchement.file_name = " + (fileName_is_initialized ? ("[" + (fileName == null ? null : fileName.toString()) + "]") : "not initialized") + ""
                 + "\n - sm_tb_leave_attchement.description = " + (description_is_initialized ? ("[" + (description == null ? null : description.toString()) + "]") : "not initialized") + ""
                 + "\n - sm_tb_leave_attchement.create_date = " + (createDate_is_initialized ? ("[" + (createDate == null ? null : createDate.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
