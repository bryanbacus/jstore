// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.shenming.sms.dc.sql2java;

import java.util.Comparator;
// imports+ 

// imports- 

/**
 * Comparator class is used to sort the SysTbPropertiesBean objects.
 */
public class SysTbPropertiesComparator implements Comparator
// extends+ 

// extends- 
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for SysTbPropertiesComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new SysTbPropertiesComparator(SysTbPropertiesManager.IDX, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>SysTbPropertiesManager.ID_IDX
     *   <li>SysTbPropertiesManager.ID_KEY_NAME
     *   <li>SysTbPropertiesManager.ID_KEY_VALUE
     *   <li>SysTbPropertiesManager.ID_KEY_GROUP
     *   <li>SysTbPropertiesManager.ID_DESCRIPTION
     *   <li>SysTbPropertiesManager.ID_MODIFY_DATE
     * </ul>
     */
    public SysTbPropertiesComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for SysTbPropertiesComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new SysTbPropertiesComparator(SysTbPropertiesManager.IDX, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>SysTbPropertiesManager.ID_IDX
     *   <li>SysTbPropertiesManager.ID_KEY_NAME
     *   <li>SysTbPropertiesManager.ID_KEY_VALUE
     *   <li>SysTbPropertiesManager.ID_KEY_GROUP
     *   <li>SysTbPropertiesManager.ID_DESCRIPTION
     *   <li>SysTbPropertiesManager.ID_MODIFY_DATE
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public SysTbPropertiesComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        SysTbPropertiesBean b1 = (SysTbPropertiesBean)pObj1;
        SysTbPropertiesBean b2 = (SysTbPropertiesBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case SysTbPropertiesManager.ID_IDX:
                if (b1.getIdx() == null && b2.getIdx() != null) {
                    iReturn = -1;
                } else if (b1.getIdx() == null && b2.getIdx() == null) {
                    iReturn = 0;
                } else if (b1.getIdx() != null && b2.getIdx() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getIdx().compareTo(b2.getIdx());
                }
                break;
            case SysTbPropertiesManager.ID_KEY_NAME:
                if (b1.getKeyName() == null && b2.getKeyName() != null) {
                    iReturn = -1;
                } else if (b1.getKeyName() == null && b2.getKeyName() == null) {
                    iReturn = 0;
                } else if (b1.getKeyName() != null && b2.getKeyName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getKeyName().compareTo(b2.getKeyName());
                }
                break;
            case SysTbPropertiesManager.ID_KEY_VALUE:
                if (b1.getKeyValue() == null && b2.getKeyValue() != null) {
                    iReturn = -1;
                } else if (b1.getKeyValue() == null && b2.getKeyValue() == null) {
                    iReturn = 0;
                } else if (b1.getKeyValue() != null && b2.getKeyValue() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getKeyValue().compareTo(b2.getKeyValue());
                }
                break;
            case SysTbPropertiesManager.ID_KEY_GROUP:
                if (b1.getKeyGroup() == null && b2.getKeyGroup() != null) {
                    iReturn = -1;
                } else if (b1.getKeyGroup() == null && b2.getKeyGroup() == null) {
                    iReturn = 0;
                } else if (b1.getKeyGroup() != null && b2.getKeyGroup() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getKeyGroup().compareTo(b2.getKeyGroup());
                }
                break;
            case SysTbPropertiesManager.ID_DESCRIPTION:
                if (b1.getDescription() == null && b2.getDescription() != null) {
                    iReturn = -1;
                } else if (b1.getDescription() == null && b2.getDescription() == null) {
                    iReturn = 0;
                } else if (b1.getDescription() != null && b2.getDescription() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getDescription().compareTo(b2.getDescription());
                }
                break;
            case SysTbPropertiesManager.ID_MODIFY_DATE:
                if (b1.getModifyDate() == null && b2.getModifyDate() != null) {
                    iReturn = -1;
                } else if (b1.getModifyDate() == null && b2.getModifyDate() == null) {
                    iReturn = 0;
                } else if (b1.getModifyDate() != null && b2.getModifyDate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getModifyDate().compareTo(b2.getModifyDate());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
// class+ 

// class- 
}
