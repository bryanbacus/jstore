// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.shenming.sms.dc.sql2java;

import java.util.Comparator;
// imports+ 

// imports- 

/**
 * Comparator class is used to sort the SmTbSaleRecordBean objects.
 */
public class SmTbSaleRecordComparator implements Comparator
// extends+ 

// extends- 
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for SmTbSaleRecordComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new SmTbSaleRecordComparator(SmTbSaleRecordManager.SALE_SEQ, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>SmTbSaleRecordManager.ID_SALE_SEQ
     *   <li>SmTbSaleRecordManager.ID_SALE_TOTAL
     *   <li>SmTbSaleRecordManager.ID_SALE_DATE
     *   <li>SmTbSaleRecordManager.ID_VIP_ID
     *   <li>SmTbSaleRecordManager.ID_SALES_ID
     * </ul>
     */
    public SmTbSaleRecordComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for SmTbSaleRecordComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new SmTbSaleRecordComparator(SmTbSaleRecordManager.SALE_SEQ, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>SmTbSaleRecordManager.ID_SALE_SEQ
     *   <li>SmTbSaleRecordManager.ID_SALE_TOTAL
     *   <li>SmTbSaleRecordManager.ID_SALE_DATE
     *   <li>SmTbSaleRecordManager.ID_VIP_ID
     *   <li>SmTbSaleRecordManager.ID_SALES_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public SmTbSaleRecordComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        SmTbSaleRecordBean b1 = (SmTbSaleRecordBean)pObj1;
        SmTbSaleRecordBean b2 = (SmTbSaleRecordBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case SmTbSaleRecordManager.ID_SALE_SEQ:
                if (b1.getSaleSeq() == null && b2.getSaleSeq() != null) {
                    iReturn = -1;
                } else if (b1.getSaleSeq() == null && b2.getSaleSeq() == null) {
                    iReturn = 0;
                } else if (b1.getSaleSeq() != null && b2.getSaleSeq() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getSaleSeq().compareTo(b2.getSaleSeq());
                }
                break;
            case SmTbSaleRecordManager.ID_SALE_TOTAL:
                if (b1.getSaleTotal() == null && b2.getSaleTotal() != null) {
                    iReturn = -1;
                } else if (b1.getSaleTotal() == null && b2.getSaleTotal() == null) {
                    iReturn = 0;
                } else if (b1.getSaleTotal() != null && b2.getSaleTotal() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getSaleTotal().compareTo(b2.getSaleTotal());
                }
                break;
            case SmTbSaleRecordManager.ID_SALE_DATE:
                if (b1.getSaleDate() == null && b2.getSaleDate() != null) {
                    iReturn = -1;
                } else if (b1.getSaleDate() == null && b2.getSaleDate() == null) {
                    iReturn = 0;
                } else if (b1.getSaleDate() != null && b2.getSaleDate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getSaleDate().compareTo(b2.getSaleDate());
                }
                break;
            case SmTbSaleRecordManager.ID_VIP_ID:
                if (b1.getVipId() == null && b2.getVipId() != null) {
                    iReturn = -1;
                } else if (b1.getVipId() == null && b2.getVipId() == null) {
                    iReturn = 0;
                } else if (b1.getVipId() != null && b2.getVipId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getVipId().compareTo(b2.getVipId());
                }
                break;
            case SmTbSaleRecordManager.ID_SALES_ID:
                if (b1.getSalesId() == null && b2.getSalesId() != null) {
                    iReturn = -1;
                } else if (b1.getSalesId() == null && b2.getSalesId() == null) {
                    iReturn = 0;
                } else if (b1.getSalesId() != null && b2.getSalesId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getSalesId().compareTo(b2.getSalesId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
// class+ 

// class- 
}
