// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.shenming.sms.dc.sql2java;

import java.sql.*;
// imports+ 

// imports- 

/**
 * Handles database calls for the sm_vw_vip_account table.
 */
public class SmVwVipAccountManager
// extends+ 

// extends- 
{

    /**
     * Column sm_vip_seq of type Types.DECIMAL mapped to Long.
     */
    public static final int ID_SM_VIP_SEQ = 0;
    public static final int TYPE_SM_VIP_SEQ = Types.DECIMAL;
    public static final String NAME_SM_VIP_SEQ = "sm_vip_seq";

    /**
     * Column vip_cht_name of type Types.VARCHAR mapped to String.
     */
    public static final int ID_VIP_CHT_NAME = 1;
    public static final int TYPE_VIP_CHT_NAME = Types.VARCHAR;
    public static final String NAME_VIP_CHT_NAME = "vip_cht_name";

    /**
     * Column vip_eng_name of type Types.VARCHAR mapped to String.
     */
    public static final int ID_VIP_ENG_NAME = 2;
    public static final int TYPE_VIP_ENG_NAME = Types.VARCHAR;
    public static final String NAME_VIP_ENG_NAME = "vip_eng_name";

    /**
     * Column birthday of type Types.TIMESTAMP mapped to java.util.Date.
     */
    public static final int ID_BIRTHDAY = 3;
    public static final int TYPE_BIRTHDAY = Types.TIMESTAMP;
    public static final String NAME_BIRTHDAY = "birthday";

    /**
     * Column sex of type Types.VARCHAR mapped to String.
     */
    public static final int ID_SEX = 4;
    public static final int TYPE_SEX = Types.VARCHAR;
    public static final String NAME_SEX = "sex";

    /**
     * Column blood of type Types.VARCHAR mapped to String.
     */
    public static final int ID_BLOOD = 5;
    public static final int TYPE_BLOOD = Types.VARCHAR;
    public static final String NAME_BLOOD = "blood";

    /**
     * Column marrage of type Types.VARCHAR mapped to String.
     */
    public static final int ID_MARRAGE = 6;
    public static final int TYPE_MARRAGE = Types.VARCHAR;
    public static final String NAME_MARRAGE = "marrage";

    /**
     * Column address of type Types.VARCHAR mapped to String.
     */
    public static final int ID_ADDRESS = 7;
    public static final int TYPE_ADDRESS = Types.VARCHAR;
    public static final String NAME_ADDRESS = "address";

    /**
     * Column phone of type Types.VARCHAR mapped to String.
     */
    public static final int ID_PHONE = 8;
    public static final int TYPE_PHONE = Types.VARCHAR;
    public static final String NAME_PHONE = "phone";

    /**
     * Column mobile of type Types.VARCHAR mapped to String.
     */
    public static final int ID_MOBILE = 9;
    public static final int TYPE_MOBILE = Types.VARCHAR;
    public static final String NAME_MOBILE = "mobile";

    /**
     * Column mail_addr of type Types.VARCHAR mapped to String.
     */
    public static final int ID_MAIL_ADDR = 10;
    public static final int TYPE_MAIL_ADDR = Types.VARCHAR;
    public static final String NAME_MAIL_ADDR = "mail_addr";

    /**
     * Column fovarite of type Types.VARCHAR mapped to String.
     */
    public static final int ID_FOVARITE = 11;
    public static final int TYPE_FOVARITE = Types.VARCHAR;
    public static final String NAME_FOVARITE = "fovarite";

    /**
     * Column job of type Types.VARCHAR mapped to String.
     */
    public static final int ID_JOB = 12;
    public static final int TYPE_JOB = Types.VARCHAR;
    public static final String NAME_JOB = "job";

    /**
     * Column cr_date of type Types.TIMESTAMP mapped to java.util.Date.
     */
    public static final int ID_CR_DATE = 13;
    public static final int TYPE_CR_DATE = Types.TIMESTAMP;
    public static final String NAME_CR_DATE = "cr_date";

    /**
     * Column buy_sum of type Types.DECIMAL mapped to Long.
     */
    public static final int ID_BUY_SUM = 14;
    public static final int TYPE_BUY_SUM = Types.DECIMAL;
    public static final String NAME_BUY_SUM = "buy_sum";

    /**
     * Column is_valid_vip of type Types.CHAR mapped to String.
     */
    public static final int ID_IS_VALID_VIP = 15;
    public static final int TYPE_IS_VALID_VIP = Types.CHAR;
    public static final String NAME_IS_VALID_VIP = "is_valid_vip";

    /**
     * Column username of type Types.VARCHAR mapped to String.
     */
    public static final int ID_USERNAME = 16;
    public static final int TYPE_USERNAME = Types.VARCHAR;
    public static final String NAME_USERNAME = "username";

    /**
     * Column password of type Types.VARCHAR mapped to String.
     */
    public static final int ID_PASSWORD = 17;
    public static final int TYPE_PASSWORD = Types.VARCHAR;
    public static final String NAME_PASSWORD = "password";

    /**
     * Column error_cnt of type Types.DECIMAL mapped to Long.
     */
    public static final int ID_ERROR_CNT = 18;
    public static final int TYPE_ERROR_CNT = Types.DECIMAL;
    public static final String NAME_ERROR_CNT = "error_cnt";

    /**
     * Column owner of type Types.DECIMAL mapped to Long.
     */
    public static final int ID_OWNER = 19;
    public static final int TYPE_OWNER = Types.DECIMAL;
    public static final String NAME_OWNER = "owner";

    /**
     * Column role_type of type Types.VARCHAR mapped to String.
     */
    public static final int ID_ROLE_TYPE = 20;
    public static final int TYPE_ROLE_TYPE = Types.VARCHAR;
    public static final String NAME_ROLE_TYPE = "role_type";

    /**
     * Column user_id of type Types.DECIMAL mapped to Long.
     */
    public static final int ID_USER_ID = 21;
    public static final int TYPE_USER_ID = Types.DECIMAL;
    public static final String NAME_USER_ID = "user_id";

    /**
     * Column description of type Types.VARCHAR mapped to String.
     */
    public static final int ID_DESCRIPTION = 22;
    public static final int TYPE_DESCRIPTION = Types.VARCHAR;
    public static final String NAME_DESCRIPTION = "description";


    private static final String TABLE_NAME = "sm_vw_vip_account";

    /**
     * Create an array of type string containing all the fields of the sm_vw_vip_account table.
     */
    private static final String[] FIELD_NAMES =
    {
        "sm_vw_vip_account.sm_vip_seq"
        ,"sm_vw_vip_account.vip_cht_name"
        ,"sm_vw_vip_account.vip_eng_name"
        ,"sm_vw_vip_account.birthday"
        ,"sm_vw_vip_account.sex"
        ,"sm_vw_vip_account.blood"
        ,"sm_vw_vip_account.marrage"
        ,"sm_vw_vip_account.address"
        ,"sm_vw_vip_account.phone"
        ,"sm_vw_vip_account.mobile"
        ,"sm_vw_vip_account.mail_addr"
        ,"sm_vw_vip_account.fovarite"
        ,"sm_vw_vip_account.job"
        ,"sm_vw_vip_account.cr_date"
        ,"sm_vw_vip_account.buy_sum"
        ,"sm_vw_vip_account.is_valid_vip"
        ,"sm_vw_vip_account.username"
        ,"sm_vw_vip_account.password"
        ,"sm_vw_vip_account.error_cnt"
        ,"sm_vw_vip_account.owner"
        ,"sm_vw_vip_account.role_type"
        ,"sm_vw_vip_account.user_id"
        ,"sm_vw_vip_account.description"
    };

    /**
     * Field that contains the comma separated fields of the sm_vw_vip_account table.
     */
    private static final String ALL_FIELDS = "sm_vw_vip_account.sm_vip_seq"
                            + ",sm_vw_vip_account.vip_cht_name"
                            + ",sm_vw_vip_account.vip_eng_name"
                            + ",sm_vw_vip_account.birthday"
                            + ",sm_vw_vip_account.sex"
                            + ",sm_vw_vip_account.blood"
                            + ",sm_vw_vip_account.marrage"
                            + ",sm_vw_vip_account.address"
                            + ",sm_vw_vip_account.phone"
                            + ",sm_vw_vip_account.mobile"
                            + ",sm_vw_vip_account.mail_addr"
                            + ",sm_vw_vip_account.fovarite"
                            + ",sm_vw_vip_account.job"
                            + ",sm_vw_vip_account.cr_date"
                            + ",sm_vw_vip_account.buy_sum"
                            + ",sm_vw_vip_account.is_valid_vip"
                            + ",sm_vw_vip_account.username"
                            + ",sm_vw_vip_account.password"
                            + ",sm_vw_vip_account.error_cnt"
                            + ",sm_vw_vip_account.owner"
                            + ",sm_vw_vip_account.role_type"
                            + ",sm_vw_vip_account.user_id"
                            + ",sm_vw_vip_account.description";

    private static SmVwVipAccountManager singleton = new SmVwVipAccountManager();

    /**
     * Get the SmVwVipAccountManager singleton.
     *
     * @return SmVwVipAccountManager
     */
    synchronized public static SmVwVipAccountManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own SmVwVipAccountManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(SmVwVipAccountManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new SmVwVipAccountBean instance.
     *
     * @return the new SmVwVipAccountBean
     */
    public SmVwVipAccountBean createSmVwVipAccountBean()
    {
        return new SmVwVipAccountBean();
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from sm_vw_vip_account.
     *
     * @return an array of SmVwVipAccountManager pObject
     */
    //38
    public SmVwVipAccountBean[] loadAll() throws SQLException
    {
        return loadAll(1, -1);
    }


    /**
     * Loads the given number of rows from sm_vw_vip_account, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of SmVwVipAccountManager pObject
     */
    //38.5
    public SmVwVipAccountBean[] loadAll(int startRow, int numRows) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM sm_vw_vip_account",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps, null, startRow, numRows);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of SmVwVipAccountBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting SmVwVipAccountBean table
     */
    //49
    public SmVwVipAccountBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of SmVwVipAccountBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting SmVwVipAccountBean table
     */
    //51
    public SmVwVipAccountBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        return loadByWhere(where, null, 1, -1);
    }

    /**
     * Retrieves an array of SmVwVipAccountBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return the resulting SmVwVipAccountBean table
     */
    //51.5
    public SmVwVipAccountBean[] loadByWhere(String where, int[] fieldList, int startRow, int numRows) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from sm_vw_vip_account " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from sm_vw_vip_account ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try
        {
            c = getConnection();
            pStatement = c.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            int count = 0;
            if (rs.absolute(startRow) && numRows!=0) {
                do
                {
                    if(fieldList == null)
                        v.add(decodeRow(rs));
                    else
                        v.add(decodeRow(rs, fieldList));
                    count++;
                } while ( (count<numRows||numRows<0) && rs.next() );
            }

            return (SmVwVipAccountBean[])v.toArray(new SmVwVipAccountBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from sm_vw_vip_account table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the sm_vw_vip_account table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM sm_vw_vip_account " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the SmVwVipAccountBean pObject into the database.
     *
     * @param pObject the SmVwVipAccountBean pObject to be saved
     */
    //100
    public SmVwVipAccountBean save(SmVwVipAccountBean pObject) throws SQLException
    {
        if (!pObject.isModified()) {
            return pObject; // should not we log something ?
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into sm_vw_vip_account (");

                if (pObject.isSmVipSeqModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("sm_vip_seq");
                    _dirtyCount++;
                }

                if (pObject.isVipChtNameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("vip_cht_name");
                    _dirtyCount++;
                }

                if (pObject.isVipEngNameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("vip_eng_name");
                    _dirtyCount++;
                }

                if (pObject.isBirthdayModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("birthday");
                    _dirtyCount++;
                }

                if (pObject.isSexModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("sex");
                    _dirtyCount++;
                }

                if (pObject.isBloodModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("blood");
                    _dirtyCount++;
                }

                if (pObject.isMarrageModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("marrage");
                    _dirtyCount++;
                }

                if (pObject.isAddressModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("address");
                    _dirtyCount++;
                }

                if (pObject.isPhoneModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("phone");
                    _dirtyCount++;
                }

                if (pObject.isMobileModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("mobile");
                    _dirtyCount++;
                }

                if (pObject.isMailAddrModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("mail_addr");
                    _dirtyCount++;
                }

                if (pObject.isFovariteModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("fovarite");
                    _dirtyCount++;
                }

                if (pObject.isJobModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("job");
                    _dirtyCount++;
                }

                if (pObject.isCrDateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("cr_date");
                    _dirtyCount++;
                }

                if (pObject.isBuySumModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("buy_sum");
                    _dirtyCount++;
                }

                if (pObject.isIsValidVipModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("is_valid_vip");
                    _dirtyCount++;
                }

                if (pObject.isUsernameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("username");
                    _dirtyCount++;
                }

                if (pObject.isPasswordModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("password");
                    _dirtyCount++;
                }

                if (pObject.isErrorCntModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("error_cnt");
                    _dirtyCount++;
                }

                if (pObject.isOwnerModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("owner");
                    _dirtyCount++;
                }

                if (pObject.isRoleTypeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("role_type");
                    _dirtyCount++;
                }

                if (pObject.isUserIdModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("user_id");
                    _dirtyCount++;
                }

                if (pObject.isDescriptionModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("description");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isSmVipSeqModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getSmVipSeq());
                }

                if (pObject.isVipChtNameModified()) {
                    ps.setString(++_dirtyCount, pObject.getVipChtName());
                }

                if (pObject.isVipEngNameModified()) {
                    ps.setString(++_dirtyCount, pObject.getVipEngName());
                }

                if (pObject.isBirthdayModified()) {
                    if (pObject.getBirthday() == null) ps.setNull(++_dirtyCount, Types.TIMESTAMP); else ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(pObject.getBirthday().getTime()));
                }

                if (pObject.isSexModified()) {
                    ps.setString(++_dirtyCount, pObject.getSex());
                }

                if (pObject.isBloodModified()) {
                    ps.setString(++_dirtyCount, pObject.getBlood());
                }

                if (pObject.isMarrageModified()) {
                    ps.setString(++_dirtyCount, pObject.getMarrage());
                }

                if (pObject.isAddressModified()) {
                    ps.setString(++_dirtyCount, pObject.getAddress());
                }

                if (pObject.isPhoneModified()) {
                    ps.setString(++_dirtyCount, pObject.getPhone());
                }

                if (pObject.isMobileModified()) {
                    ps.setString(++_dirtyCount, pObject.getMobile());
                }

                if (pObject.isMailAddrModified()) {
                    ps.setString(++_dirtyCount, pObject.getMailAddr());
                }

                if (pObject.isFovariteModified()) {
                    ps.setString(++_dirtyCount, pObject.getFovarite());
                }

                if (pObject.isJobModified()) {
                    ps.setString(++_dirtyCount, pObject.getJob());
                }

                if (pObject.isCrDateModified()) {
                    if (pObject.getCrDate() == null) ps.setNull(++_dirtyCount, Types.TIMESTAMP); else ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(pObject.getCrDate().getTime()));
                }

                if (pObject.isBuySumModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getBuySum());
                }

                if (pObject.isIsValidVipModified()) {
                    ps.setString(++_dirtyCount, pObject.getIsValidVip());
                }

                if (pObject.isUsernameModified()) {
                    ps.setString(++_dirtyCount, pObject.getUsername());
                }

                if (pObject.isPasswordModified()) {
                    ps.setString(++_dirtyCount, pObject.getPassword());
                }

                if (pObject.isErrorCntModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getErrorCnt());
                }

                if (pObject.isOwnerModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getOwner());
                }

                if (pObject.isRoleTypeModified()) {
                    ps.setString(++_dirtyCount, pObject.getRoleType());
                }

                if (pObject.isUserIdModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getUserId());
                }

                if (pObject.isDescriptionModified()) {
                    ps.setString(++_dirtyCount, pObject.getDescription());
                }

                ps.executeUpdate();

                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else
            { // UPDATE

                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE sm_vw_vip_account SET ");
                boolean useComma=false;

                if (pObject.isSmVipSeqModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("sm_vip_seq").append("=?");
                }

                if (pObject.isVipChtNameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("vip_cht_name").append("=?");
                }

                if (pObject.isVipEngNameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("vip_eng_name").append("=?");
                }

                if (pObject.isBirthdayModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("birthday").append("=?");
                }

                if (pObject.isSexModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("sex").append("=?");
                }

                if (pObject.isBloodModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("blood").append("=?");
                }

                if (pObject.isMarrageModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("marrage").append("=?");
                }

                if (pObject.isAddressModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("address").append("=?");
                }

                if (pObject.isPhoneModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("phone").append("=?");
                }

                if (pObject.isMobileModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("mobile").append("=?");
                }

                if (pObject.isMailAddrModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("mail_addr").append("=?");
                }

                if (pObject.isFovariteModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("fovarite").append("=?");
                }

                if (pObject.isJobModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("job").append("=?");
                }

                if (pObject.isCrDateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("cr_date").append("=?");
                }

                if (pObject.isBuySumModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("buy_sum").append("=?");
                }

                if (pObject.isIsValidVipModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("is_valid_vip").append("=?");
                }

                if (pObject.isUsernameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("username").append("=?");
                }

                if (pObject.isPasswordModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("password").append("=?");
                }

                if (pObject.isErrorCntModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("error_cnt").append("=?");
                }

                if (pObject.isOwnerModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("owner").append("=?");
                }

                if (pObject.isRoleTypeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("role_type").append("=?");
                }

                if (pObject.isUserIdModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("user_id").append("=?");
                }

                if (pObject.isDescriptionModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("description").append("=?");
                }
                _sql.append("");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isSmVipSeqModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getSmVipSeq());
                }

                if (pObject.isVipChtNameModified()) {
                      ps.setString(++_dirtyCount, pObject.getVipChtName());
                }

                if (pObject.isVipEngNameModified()) {
                      ps.setString(++_dirtyCount, pObject.getVipEngName());
                }

                if (pObject.isBirthdayModified()) {
                      if (pObject.getBirthday() == null) ps.setNull(++_dirtyCount, Types.TIMESTAMP); else ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(pObject.getBirthday().getTime()));
                }

                if (pObject.isSexModified()) {
                      ps.setString(++_dirtyCount, pObject.getSex());
                }

                if (pObject.isBloodModified()) {
                      ps.setString(++_dirtyCount, pObject.getBlood());
                }

                if (pObject.isMarrageModified()) {
                      ps.setString(++_dirtyCount, pObject.getMarrage());
                }

                if (pObject.isAddressModified()) {
                      ps.setString(++_dirtyCount, pObject.getAddress());
                }

                if (pObject.isPhoneModified()) {
                      ps.setString(++_dirtyCount, pObject.getPhone());
                }

                if (pObject.isMobileModified()) {
                      ps.setString(++_dirtyCount, pObject.getMobile());
                }

                if (pObject.isMailAddrModified()) {
                      ps.setString(++_dirtyCount, pObject.getMailAddr());
                }

                if (pObject.isFovariteModified()) {
                      ps.setString(++_dirtyCount, pObject.getFovarite());
                }

                if (pObject.isJobModified()) {
                      ps.setString(++_dirtyCount, pObject.getJob());
                }

                if (pObject.isCrDateModified()) {
                      if (pObject.getCrDate() == null) ps.setNull(++_dirtyCount, Types.TIMESTAMP); else ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(pObject.getCrDate().getTime()));
                }

                if (pObject.isBuySumModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getBuySum());
                }

                if (pObject.isIsValidVipModified()) {
                      ps.setString(++_dirtyCount, pObject.getIsValidVip());
                }

                if (pObject.isUsernameModified()) {
                      ps.setString(++_dirtyCount, pObject.getUsername());
                }

                if (pObject.isPasswordModified()) {
                      ps.setString(++_dirtyCount, pObject.getPassword());
                }

                if (pObject.isErrorCntModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getErrorCnt());
                }

                if (pObject.isOwnerModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getOwner());
                }

                if (pObject.isRoleTypeModified()) {
                      ps.setString(++_dirtyCount, pObject.getRoleType());
                }

                if (pObject.isUserIdModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getUserId());
                }

                if (pObject.isDescriptionModified()) {
                      ps.setString(++_dirtyCount, pObject.getDescription());
                }

                if (_dirtyCount == 0) {
                     return pObject;
                }

                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }

            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of SmVwVipAccountBean pObjects into the database.
     *
     * @param pObjects the SmVwVipAccountBean pObject table to be saved
     * @return the saved SmVwVipAccountBean array.
     */
    //65
    public SmVwVipAccountBean[] save(SmVwVipAccountBean[] pObjects) throws SQLException
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique SmVwVipAccountBean pObject from a template one giving a c
     *
     * @param pObject the SmVwVipAccountBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public SmVwVipAccountBean loadUniqueUsingTemplate(SmVwVipAccountBean pObject) throws SQLException
    {
         SmVwVipAccountBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of SmVwVipAccountBean from a template one.
     *
     * @param pObject the SmVwVipAccountBean template to look for
     * @return all the SmVwVipAccountBean matching the template
     */
    //88
    public SmVwVipAccountBean[] loadUsingTemplate(SmVwVipAccountBean pObject) throws SQLException
    {
        return loadUsingTemplate(pObject, 1, -1);
    }
    /**
     * Loads an array of SmVwVipAccountBean from a template one, given the start row and number of rows.
     *
     * @param pObject the SmVwVipAccountBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the SmVwVipAccountBean matching the template
     */
    //88.5
    public SmVwVipAccountBean[] loadUsingTemplate(SmVwVipAccountBean pObject, int startRow, int numRows) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from sm_vw_vip_account WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;

             if (pObject.isSmVipSeqModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sm_vip_seq= ?");
             }

             if (pObject.isVipChtNameModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("vip_cht_name= ?");
             }

             if (pObject.isVipEngNameModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("vip_eng_name= ?");
             }

             if (pObject.isBirthdayModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("birthday= ?");
             }

             if (pObject.isSexModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sex= ?");
             }

             if (pObject.isBloodModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("blood= ?");
             }

             if (pObject.isMarrageModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("marrage= ?");
             }

             if (pObject.isAddressModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("address= ?");
             }

             if (pObject.isPhoneModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("phone= ?");
             }

             if (pObject.isMobileModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("mobile= ?");
             }

             if (pObject.isMailAddrModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("mail_addr= ?");
             }

             if (pObject.isFovariteModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("fovarite= ?");
             }

             if (pObject.isJobModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("job= ?");
             }

             if (pObject.isCrDateModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("cr_date= ?");
             }

             if (pObject.isBuySumModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("buy_sum= ?");
             }

             if (pObject.isIsValidVipModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("is_valid_vip= ?");
             }

             if (pObject.isUsernameModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("username= ?");
             }

             if (pObject.isPasswordModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("password= ?");
             }

             if (pObject.isErrorCntModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("error_cnt= ?");
             }

             if (pObject.isOwnerModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("owner= ?");
             }

             if (pObject.isRoleTypeModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("role_type= ?");
             }

             if (pObject.isUserIdModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("user_id= ?");
             }

             if (pObject.isDescriptionModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("description= ?");
             }

             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;

             if (pObject.isSmVipSeqModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getSmVipSeq());
             }

             if (pObject.isVipChtNameModified()) {
                 ps.setString(++_dirtyCount, pObject.getVipChtName());
             }

             if (pObject.isVipEngNameModified()) {
                 ps.setString(++_dirtyCount, pObject.getVipEngName());
             }

             if (pObject.isBirthdayModified()) {
                 if (pObject.getBirthday() == null) ps.setNull(++_dirtyCount, Types.TIMESTAMP); else ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(pObject.getBirthday().getTime()));
             }

             if (pObject.isSexModified()) {
                 ps.setString(++_dirtyCount, pObject.getSex());
             }

             if (pObject.isBloodModified()) {
                 ps.setString(++_dirtyCount, pObject.getBlood());
             }

             if (pObject.isMarrageModified()) {
                 ps.setString(++_dirtyCount, pObject.getMarrage());
             }

             if (pObject.isAddressModified()) {
                 ps.setString(++_dirtyCount, pObject.getAddress());
             }

             if (pObject.isPhoneModified()) {
                 ps.setString(++_dirtyCount, pObject.getPhone());
             }

             if (pObject.isMobileModified()) {
                 ps.setString(++_dirtyCount, pObject.getMobile());
             }

             if (pObject.isMailAddrModified()) {
                 ps.setString(++_dirtyCount, pObject.getMailAddr());
             }

             if (pObject.isFovariteModified()) {
                 ps.setString(++_dirtyCount, pObject.getFovarite());
             }

             if (pObject.isJobModified()) {
                 ps.setString(++_dirtyCount, pObject.getJob());
             }

             if (pObject.isCrDateModified()) {
                 if (pObject.getCrDate() == null) ps.setNull(++_dirtyCount, Types.TIMESTAMP); else ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(pObject.getCrDate().getTime()));
             }

             if (pObject.isBuySumModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getBuySum());
             }

             if (pObject.isIsValidVipModified()) {
                 ps.setString(++_dirtyCount, pObject.getIsValidVip());
             }

             if (pObject.isUsernameModified()) {
                 ps.setString(++_dirtyCount, pObject.getUsername());
             }

             if (pObject.isPasswordModified()) {
                 ps.setString(++_dirtyCount, pObject.getPassword());
             }

             if (pObject.isErrorCntModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getErrorCnt());
             }

             if (pObject.isOwnerModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getOwner());
             }

             if (pObject.isRoleTypeModified()) {
                 ps.setString(++_dirtyCount, pObject.getRoleType());
             }

             if (pObject.isUserIdModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getUserId());
             }

             if (pObject.isDescriptionModified()) {
                 ps.setString(++_dirtyCount, pObject.getDescription());
             }

             ps.executeQuery();
             return loadByPreparedStatement(ps, null, startRow, numRows);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a SmVwVipAccountBean template.
     *
     * @param pObject the SmVwVipAccountBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(SmVwVipAccountBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            sql = new StringBuffer("DELETE FROM sm_vw_vip_account WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isSmVipSeqInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("sm_vip_seq").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isVipChtNameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("vip_cht_name").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isVipEngNameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("vip_eng_name").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isBirthdayInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("birthday").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isSexInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("sex").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isBloodInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("blood").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isMarrageInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("marrage").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isAddressInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("address").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isPhoneInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("phone").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isMobileInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("mobile").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isMailAddrInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("mail_addr").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isFovariteInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("fovarite").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isJobInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("job").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isCrDateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("cr_date").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isBuySumInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("buy_sum").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isIsValidVipInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("is_valid_vip").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isUsernameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("username").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isPasswordInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("password").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isErrorCntInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("error_cnt").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isOwnerInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("owner").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isRoleTypeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("role_type").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isUserIdInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("user_id").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isDescriptionInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("description").append("=?");
                _dirtyAnd ++;
            }

            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;

            if (pObject.isSmVipSeqInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getSmVipSeq());
            }

            if (pObject.isVipChtNameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getVipChtName());
            }

            if (pObject.isVipEngNameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getVipEngName());
            }

            if (pObject.isBirthdayInitialized()) {
                if (pObject.getBirthday() == null) ps.setNull(++_dirtyCount, Types.TIMESTAMP); else ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(pObject.getBirthday().getTime()));
            }

            if (pObject.isSexInitialized()) {
                ps.setString(++_dirtyCount, pObject.getSex());
            }

            if (pObject.isBloodInitialized()) {
                ps.setString(++_dirtyCount, pObject.getBlood());
            }

            if (pObject.isMarrageInitialized()) {
                ps.setString(++_dirtyCount, pObject.getMarrage());
            }

            if (pObject.isAddressInitialized()) {
                ps.setString(++_dirtyCount, pObject.getAddress());
            }

            if (pObject.isPhoneInitialized()) {
                ps.setString(++_dirtyCount, pObject.getPhone());
            }

            if (pObject.isMobileInitialized()) {
                ps.setString(++_dirtyCount, pObject.getMobile());
            }

            if (pObject.isMailAddrInitialized()) {
                ps.setString(++_dirtyCount, pObject.getMailAddr());
            }

            if (pObject.isFovariteInitialized()) {
                ps.setString(++_dirtyCount, pObject.getFovarite());
            }

            if (pObject.isJobInitialized()) {
                ps.setString(++_dirtyCount, pObject.getJob());
            }

            if (pObject.isCrDateInitialized()) {
                if (pObject.getCrDate() == null) ps.setNull(++_dirtyCount, Types.TIMESTAMP); else ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(pObject.getCrDate().getTime()));
            }

            if (pObject.isBuySumInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getBuySum());
            }

            if (pObject.isIsValidVipInitialized()) {
                ps.setString(++_dirtyCount, pObject.getIsValidVip());
            }

            if (pObject.isUsernameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getUsername());
            }

            if (pObject.isPasswordInitialized()) {
                ps.setString(++_dirtyCount, pObject.getPassword());
            }

            if (pObject.isErrorCntInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getErrorCnt());
            }

            if (pObject.isOwnerInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getOwner());
            }

            if (pObject.isRoleTypeInitialized()) {
                ps.setString(++_dirtyCount, pObject.getRoleType());
            }

            if (pObject.isUserIdInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getUserId());
            }

            if (pObject.isDescriptionInitialized()) {
                ps.setString(++_dirtyCount, pObject.getDescription());
            }

            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table sm_vw_vip_account.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table sm_vw_vip_account with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from sm_vw_vip_account " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = getConnection();
            pStatement = c.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table sm_vw_vip_account with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific SmVwVipAccountBean pObject given a c
     *
     * @param pObject the SmVwVipAccountBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(SmVwVipAccountBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;

        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from sm_vw_vip_account WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;

                if (pObject.isSmVipSeqModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sm_vip_seq= ?");
                }

                if (pObject.isVipChtNameModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("vip_cht_name= ?");
                }

                if (pObject.isVipEngNameModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("vip_eng_name= ?");
                }

                if (pObject.isBirthdayModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("birthday= ?");
                }

                if (pObject.isSexModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sex= ?");
                }

                if (pObject.isBloodModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("blood= ?");
                }

                if (pObject.isMarrageModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("marrage= ?");
                }

                if (pObject.isAddressModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("address= ?");
                }

                if (pObject.isPhoneModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("phone= ?");
                }

                if (pObject.isMobileModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("mobile= ?");
                }

                if (pObject.isMailAddrModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("mail_addr= ?");
                }

                if (pObject.isFovariteModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("fovarite= ?");
                }

                if (pObject.isJobModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("job= ?");
                }

                if (pObject.isCrDateModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("cr_date= ?");
                }

                if (pObject.isBuySumModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("buy_sum= ?");
                }

                if (pObject.isIsValidVipModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("is_valid_vip= ?");
                }

                if (pObject.isUsernameModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("username= ?");
                }

                if (pObject.isPasswordModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("password= ?");
                }

                if (pObject.isErrorCntModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("error_cnt= ?");
                }

                if (pObject.isOwnerModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("owner= ?");
                }

                if (pObject.isRoleTypeModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("role_type= ?");
                }

                if (pObject.isUserIdModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("user_id= ?");
                }

                if (pObject.isDescriptionModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("description= ?");
                }

                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");

                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

                _dirtyCount = 0;

                if (pObject.isSmVipSeqModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getSmVipSeq());
                }

                if (pObject.isVipChtNameModified()) {
                    ps.setString(++_dirtyCount, pObject.getVipChtName());
                }

                if (pObject.isVipEngNameModified()) {
                    ps.setString(++_dirtyCount, pObject.getVipEngName());
                }

                if (pObject.isBirthdayModified()) {
                    if (pObject.getBirthday() == null) ps.setNull(++_dirtyCount, Types.TIMESTAMP); else ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(pObject.getBirthday().getTime()));
                }

                if (pObject.isSexModified()) {
                    ps.setString(++_dirtyCount, pObject.getSex());
                }

                if (pObject.isBloodModified()) {
                    ps.setString(++_dirtyCount, pObject.getBlood());
                }

                if (pObject.isMarrageModified()) {
                    ps.setString(++_dirtyCount, pObject.getMarrage());
                }

                if (pObject.isAddressModified()) {
                    ps.setString(++_dirtyCount, pObject.getAddress());
                }

                if (pObject.isPhoneModified()) {
                    ps.setString(++_dirtyCount, pObject.getPhone());
                }

                if (pObject.isMobileModified()) {
                    ps.setString(++_dirtyCount, pObject.getMobile());
                }

                if (pObject.isMailAddrModified()) {
                    ps.setString(++_dirtyCount, pObject.getMailAddr());
                }

                if (pObject.isFovariteModified()) {
                    ps.setString(++_dirtyCount, pObject.getFovarite());
                }

                if (pObject.isJobModified()) {
                    ps.setString(++_dirtyCount, pObject.getJob());
                }

                if (pObject.isCrDateModified()) {
                    if (pObject.getCrDate() == null) ps.setNull(++_dirtyCount, Types.TIMESTAMP); else ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(pObject.getCrDate().getTime()));
                }

                if (pObject.isBuySumModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getBuySum());
                }

                if (pObject.isIsValidVipModified()) {
                    ps.setString(++_dirtyCount, pObject.getIsValidVip());
                }

                if (pObject.isUsernameModified()) {
                    ps.setString(++_dirtyCount, pObject.getUsername());
                }

                if (pObject.isPasswordModified()) {
                    ps.setString(++_dirtyCount, pObject.getPassword());
                }

                if (pObject.isErrorCntModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getErrorCnt());
                }

                if (pObject.isOwnerModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getOwner());
                }

                if (pObject.isRoleTypeModified()) {
                    ps.setString(++_dirtyCount, pObject.getRoleType());
                }

                if (pObject.isUserIdModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getUserId());
                }

                if (pObject.isDescriptionModified()) {
                    ps.setString(++_dirtyCount, pObject.getDescription());
                }

                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the sm_vw_vip_account on a SmVwVipAccountBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting SmVwVipAccountBean pObject
     */
    //72
    public SmVwVipAccountBean decodeRow(ResultSet rs) throws SQLException
    {
        SmVwVipAccountBean pObject = createSmVwVipAccountBean();
        pObject.setSmVipSeq(Manager.getLong(rs, 1));
        pObject.setVipChtName(rs.getString(2));
        pObject.setVipEngName(rs.getString(3));
        pObject.setBirthday(rs.getTimestamp(4));
        pObject.setSex(rs.getString(5));
        pObject.setBlood(rs.getString(6));
        pObject.setMarrage(rs.getString(7));
        pObject.setAddress(rs.getString(8));
        pObject.setPhone(rs.getString(9));
        pObject.setMobile(rs.getString(10));
        pObject.setMailAddr(rs.getString(11));
        pObject.setFovarite(rs.getString(12));
        pObject.setJob(rs.getString(13));
        pObject.setCrDate(rs.getTimestamp(14));
        pObject.setBuySum(Manager.getLong(rs, 15));
        pObject.setIsValidVip(rs.getString(16));
        pObject.setUsername(rs.getString(17));
        pObject.setPassword(rs.getString(18));
        pObject.setErrorCnt(Manager.getLong(rs, 19));
        pObject.setOwner(Manager.getLong(rs, 20));
        pObject.setRoleType(rs.getString(21));
        pObject.setUserId(Manager.getLong(rs, 22));
        pObject.setDescription(rs.getString(23));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the sm_vw_vip_account table on a SmVwVipAccountBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting SmVwVipAccountBean pObject
     */
    //73
    public SmVwVipAccountBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        SmVwVipAccountBean pObject = createSmVwVipAccountBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_SM_VIP_SEQ:
                    ++pos;
                    pObject.setSmVipSeq(Manager.getLong(rs, pos));
                    break;
                case ID_VIP_CHT_NAME:
                    ++pos;
                    pObject.setVipChtName(rs.getString(pos));
                    break;
                case ID_VIP_ENG_NAME:
                    ++pos;
                    pObject.setVipEngName(rs.getString(pos));
                    break;
                case ID_BIRTHDAY:
                    ++pos;
                    pObject.setBirthday(rs.getTimestamp(pos));
                    break;
                case ID_SEX:
                    ++pos;
                    pObject.setSex(rs.getString(pos));
                    break;
                case ID_BLOOD:
                    ++pos;
                    pObject.setBlood(rs.getString(pos));
                    break;
                case ID_MARRAGE:
                    ++pos;
                    pObject.setMarrage(rs.getString(pos));
                    break;
                case ID_ADDRESS:
                    ++pos;
                    pObject.setAddress(rs.getString(pos));
                    break;
                case ID_PHONE:
                    ++pos;
                    pObject.setPhone(rs.getString(pos));
                    break;
                case ID_MOBILE:
                    ++pos;
                    pObject.setMobile(rs.getString(pos));
                    break;
                case ID_MAIL_ADDR:
                    ++pos;
                    pObject.setMailAddr(rs.getString(pos));
                    break;
                case ID_FOVARITE:
                    ++pos;
                    pObject.setFovarite(rs.getString(pos));
                    break;
                case ID_JOB:
                    ++pos;
                    pObject.setJob(rs.getString(pos));
                    break;
                case ID_CR_DATE:
                    ++pos;
                    pObject.setCrDate(rs.getTimestamp(pos));
                    break;
                case ID_BUY_SUM:
                    ++pos;
                    pObject.setBuySum(Manager.getLong(rs, pos));
                    break;
                case ID_IS_VALID_VIP:
                    ++pos;
                    pObject.setIsValidVip(rs.getString(pos));
                    break;
                case ID_USERNAME:
                    ++pos;
                    pObject.setUsername(rs.getString(pos));
                    break;
                case ID_PASSWORD:
                    ++pos;
                    pObject.setPassword(rs.getString(pos));
                    break;
                case ID_ERROR_CNT:
                    ++pos;
                    pObject.setErrorCnt(Manager.getLong(rs, pos));
                    break;
                case ID_OWNER:
                    ++pos;
                    pObject.setOwner(Manager.getLong(rs, pos));
                    break;
                case ID_ROLE_TYPE:
                    ++pos;
                    pObject.setRoleType(rs.getString(pos));
                    break;
                case ID_USER_ID:
                    ++pos;
                    pObject.setUserId(Manager.getLong(rs, pos));
                    break;
                case ID_DESCRIPTION:
                    ++pos;
                    pObject.setDescription(rs.getString(pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of SmVwVipAccountBean
     */
    //41
    public SmVwVipAccountBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of SmVwVipAccountBean
     */
    public SmVwVipAccountBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        return loadByPreparedStatement(ps, fieldList, 1, -1);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of SmVwVipAccountBean
     */
    //41.5
    public SmVwVipAccountBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            int count = 0;
            if (rs.absolute(startRow) && numRows!=0) {
                do
                {
                    if(fieldList == null)
                        v.add(decodeRow(rs));
                    else
                        v.add(decodeRow(rs, fieldList));
                    count++;
                } while ( (count<numRows||numRows<0) && rs.next() );
            }
            return (SmVwVipAccountBean[])v.toArray(new SmVwVipAccountBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER
    ///////////////////////////////////////////////////////////////////////
    private SmVwVipAccountListener listener = null;

    /**
     * Registers a unique SmVwVipAccountListener listener.
     */
    //66.5
    public void registerListener(SmVwVipAccountListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the SmVwVipAccountBean pObject.
     *
     * @param pObject the SmVwVipAccountBean pObject to be saved
     */
    //67
    void beforeInsert(SmVwVipAccountBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the SmVwVipAccountBean pObject.
     *
     * @param pObject the SmVwVipAccountBean pObject to be saved
     */
    //68
    void afterInsert(SmVwVipAccountBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the SmVwVipAccountBean pObject.
     *
     * @param pObject the SmVwVipAccountBean pObject to be updated
     */
    //69
    void beforeUpdate(SmVwVipAccountBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the SmVwVipAccountBean pObject.
     *
     * @param pObject the SmVwVipAccountBean pObject to be updated
     */
    //70
    void afterUpdate(SmVwVipAccountBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 
}
