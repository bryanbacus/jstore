// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.shenming.sms.dc.sql2java;

import java.sql.*;
// imports+ 

// imports- 

/**
 * Handles database calls for the sm_tb_sale_item table.
 */
public class SmTbSaleItemManager
// extends+ 

// extends- 
{

    /**
     * Column item_seq of type Types.DECIMAL mapped to Long.
     */
    public static final int ID_ITEM_SEQ = 0;
    public static final int TYPE_ITEM_SEQ = Types.DECIMAL;
    public static final String NAME_ITEM_SEQ = "item_seq";

    /**
     * Column prd_id of type Types.DECIMAL mapped to Long.
     */
    public static final int ID_PRD_ID = 1;
    public static final int TYPE_PRD_ID = Types.DECIMAL;
    public static final String NAME_PRD_ID = "prd_id";

    /**
     * Column count of type Types.DECIMAL mapped to Long.
     */
    public static final int ID_COUNT = 2;
    public static final int TYPE_COUNT = Types.DECIMAL;
    public static final String NAME_COUNT = "count";

    /**
     * Column prd_unit_price of type Types.DECIMAL mapped to Long.
     */
    public static final int ID_PRD_UNIT_PRICE = 3;
    public static final int TYPE_PRD_UNIT_PRICE = Types.DECIMAL;
    public static final String NAME_PRD_UNIT_PRICE = "prd_unit_price";

    /**
     * Column prd_discount_price of type Types.DECIMAL mapped to Long.
     */
    public static final int ID_PRD_DISCOUNT_PRICE = 4;
    public static final int TYPE_PRD_DISCOUNT_PRICE = Types.DECIMAL;
    public static final String NAME_PRD_DISCOUNT_PRICE = "prd_discount_price";

    /**
     * Column vip_id of type Types.DECIMAL mapped to Long.
     */
    public static final int ID_VIP_ID = 5;
    public static final int TYPE_VIP_ID = Types.DECIMAL;
    public static final String NAME_VIP_ID = "vip_id";

    /**
     * Column sale_id of type Types.DECIMAL mapped to Long.
     */
    public static final int ID_SALE_ID = 6;
    public static final int TYPE_SALE_ID = Types.DECIMAL;
    public static final String NAME_SALE_ID = "sale_id";

    /**
     * Column cr_date of type Types.TIMESTAMP mapped to java.util.Date.
     */
    public static final int ID_CR_DATE = 7;
    public static final int TYPE_CR_DATE = Types.TIMESTAMP;
    public static final String NAME_CR_DATE = "cr_date";

    /**
     * Column sale_seq of type Types.DECIMAL mapped to Long.
     */
    public static final int ID_SALE_SEQ = 8;
    public static final int TYPE_SALE_SEQ = Types.DECIMAL;
    public static final String NAME_SALE_SEQ = "sale_seq";

    /**
     * Column is_close of type Types.CHAR mapped to String.
     */
    public static final int ID_IS_CLOSE = 9;
    public static final int TYPE_IS_CLOSE = Types.CHAR;
    public static final String NAME_IS_CLOSE = "is_close";

    /**
     * Column upd_date of type Types.TIMESTAMP mapped to java.util.Date.
     */
    public static final int ID_UPD_DATE = 10;
    public static final int TYPE_UPD_DATE = Types.TIMESTAMP;
    public static final String NAME_UPD_DATE = "upd_date";


    private static final String TABLE_NAME = "sm_tb_sale_item";

    /**
     * Create an array of type string containing all the fields of the sm_tb_sale_item table.
     */
    private static final String[] FIELD_NAMES =
    {
        "sm_tb_sale_item.item_seq"
        ,"sm_tb_sale_item.prd_id"
        ,"sm_tb_sale_item.count"
        ,"sm_tb_sale_item.prd_unit_price"
        ,"sm_tb_sale_item.prd_discount_price"
        ,"sm_tb_sale_item.vip_id"
        ,"sm_tb_sale_item.sale_id"
        ,"sm_tb_sale_item.cr_date"
        ,"sm_tb_sale_item.sale_seq"
        ,"sm_tb_sale_item.is_close"
        ,"sm_tb_sale_item.upd_date"
    };

    /**
     * Field that contains the comma separated fields of the sm_tb_sale_item table.
     */
    private static final String ALL_FIELDS = "sm_tb_sale_item.item_seq"
                            + ",sm_tb_sale_item.prd_id"
                            + ",sm_tb_sale_item.count"
                            + ",sm_tb_sale_item.prd_unit_price"
                            + ",sm_tb_sale_item.prd_discount_price"
                            + ",sm_tb_sale_item.vip_id"
                            + ",sm_tb_sale_item.sale_id"
                            + ",sm_tb_sale_item.cr_date"
                            + ",sm_tb_sale_item.sale_seq"
                            + ",sm_tb_sale_item.is_close"
                            + ",sm_tb_sale_item.upd_date";

    private static SmTbSaleItemManager singleton = new SmTbSaleItemManager();

    /**
     * Get the SmTbSaleItemManager singleton.
     *
     * @return SmTbSaleItemManager
     */
    synchronized public static SmTbSaleItemManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own SmTbSaleItemManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(SmTbSaleItemManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new SmTbSaleItemBean instance.
     *
     * @return the new SmTbSaleItemBean
     */
    public SmTbSaleItemBean createSmTbSaleItemBean()
    {
        return new SmTbSaleItemBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a SmTbSaleItemBean from the sm_tb_sale_item using its key fields.
     *
     * @return a unique SmTbSaleItemBean
     */
    //12
    public SmTbSaleItemBean loadByPrimaryKey(Long itemSeq) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM sm_tb_sale_item WHERE sm_tb_sale_item.item_seq=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, itemSeq);
            SmTbSaleItemBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Long itemSeq) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from sm_tb_sale_item WHERE sm_tb_sale_item.item_seq=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, itemSeq);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from sm_tb_sale_item.
     *
     * @return an array of SmTbSaleItemManager pObject
     */
    //38
    public SmTbSaleItemBean[] loadAll() throws SQLException
    {
        return loadAll(1, -1);
    }


    /**
     * Loads the given number of rows from sm_tb_sale_item, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of SmTbSaleItemManager pObject
     */
    //38.5
    public SmTbSaleItemBean[] loadAll(int startRow, int numRows) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM sm_tb_sale_item",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps, null, startRow, numRows);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of SmTbSaleItemBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting SmTbSaleItemBean table
     */
    //49
    public SmTbSaleItemBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of SmTbSaleItemBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting SmTbSaleItemBean table
     */
    //51
    public SmTbSaleItemBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        return loadByWhere(where, null, 1, -1);
    }

    /**
     * Retrieves an array of SmTbSaleItemBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return the resulting SmTbSaleItemBean table
     */
    //51.5
    public SmTbSaleItemBean[] loadByWhere(String where, int[] fieldList, int startRow, int numRows) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from sm_tb_sale_item " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from sm_tb_sale_item ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try
        {
            c = getConnection();
            pStatement = c.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            int count = 0;
            if (rs.absolute(startRow) && numRows!=0) {
                do
                {
                    if(fieldList == null)
                        v.add(decodeRow(rs));
                    else
                        v.add(decodeRow(rs, fieldList));
                    count++;
                } while ( (count<numRows||numRows<0) && rs.next() );
            }

            return (SmTbSaleItemBean[])v.toArray(new SmTbSaleItemBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from sm_tb_sale_item table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the sm_tb_sale_item table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM sm_tb_sale_item " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the SmTbSaleItemBean pObject into the database.
     *
     * @param pObject the SmTbSaleItemBean pObject to be saved
     */
    //100
    public SmTbSaleItemBean save(SmTbSaleItemBean pObject) throws SQLException
    {
        if (!pObject.isModified()) {
            return pObject; // should not we log something ?
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into sm_tb_sale_item (");

                if (pObject.isItemSeqModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("item_seq");
                    _dirtyCount++;
                }

                if (pObject.isPrdIdModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("prd_id");
                    _dirtyCount++;
                }

                if (pObject.isCountModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("count");
                    _dirtyCount++;
                }

                if (pObject.isPrdUnitPriceModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("prd_unit_price");
                    _dirtyCount++;
                }

                if (pObject.isPrdDiscountPriceModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("prd_discount_price");
                    _dirtyCount++;
                }

                if (pObject.isVipIdModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("vip_id");
                    _dirtyCount++;
                }

                if (pObject.isSaleIdModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("sale_id");
                    _dirtyCount++;
                }

                if (pObject.isCrDateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("cr_date");
                    _dirtyCount++;
                }

                if (pObject.isSaleSeqModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("sale_seq");
                    _dirtyCount++;
                }

                if (pObject.isIsCloseModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("is_close");
                    _dirtyCount++;
                }

                if (pObject.isUpdDateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("upd_date");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isItemSeqModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getItemSeq());
                }

                if (pObject.isPrdIdModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getPrdId());
                }

                if (pObject.isCountModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getCount());
                }

                if (pObject.isPrdUnitPriceModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getPrdUnitPrice());
                }

                if (pObject.isPrdDiscountPriceModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getPrdDiscountPrice());
                }

                if (pObject.isVipIdModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getVipId());
                }

                if (pObject.isSaleIdModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getSaleId());
                }

                if (pObject.isCrDateModified()) {
                    if (pObject.getCrDate() == null) ps.setNull(++_dirtyCount, Types.TIMESTAMP); else ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(pObject.getCrDate().getTime()));
                }

                if (pObject.isSaleSeqModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getSaleSeq());
                }

                if (pObject.isIsCloseModified()) {
                    ps.setString(++_dirtyCount, pObject.getIsClose());
                }

                if (pObject.isUpdDateModified()) {
                    if (pObject.getUpdDate() == null) ps.setNull(++_dirtyCount, Types.TIMESTAMP); else ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(pObject.getUpdDate().getTime()));
                }

                ps.executeUpdate();

                if (!pObject.isItemSeqModified())
                {
                    PreparedStatement ps2 = null;
                    ResultSet rs = null;
                    try {
                        ps2 = c.prepareStatement("SELECT last_insert_id()");
                        rs = ps2.executeQuery();
                        if(rs.next()) {
                            pObject.setItemSeq(Manager.getLong(rs, 1));
                        } else {
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                        }
                    } finally {
                        getManager().close(ps2, rs);
                    }
                }

                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else
            { // UPDATE
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE sm_tb_sale_item SET ");
                boolean useComma=false;

                if (pObject.isItemSeqModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("item_seq").append("=?");
                }

                if (pObject.isPrdIdModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("prd_id").append("=?");
                }

                if (pObject.isCountModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("count").append("=?");
                }

                if (pObject.isPrdUnitPriceModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("prd_unit_price").append("=?");
                }

                if (pObject.isPrdDiscountPriceModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("prd_discount_price").append("=?");
                }

                if (pObject.isVipIdModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("vip_id").append("=?");
                }

                if (pObject.isSaleIdModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("sale_id").append("=?");
                }

                if (pObject.isCrDateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("cr_date").append("=?");
                }

                if (pObject.isSaleSeqModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("sale_seq").append("=?");
                }

                if (pObject.isIsCloseModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("is_close").append("=?");
                }

                if (pObject.isUpdDateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("upd_date").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("sm_tb_sale_item.item_seq=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isItemSeqModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getItemSeq());
                }

                if (pObject.isPrdIdModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getPrdId());
                }

                if (pObject.isCountModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getCount());
                }

                if (pObject.isPrdUnitPriceModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getPrdUnitPrice());
                }

                if (pObject.isPrdDiscountPriceModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getPrdDiscountPrice());
                }

                if (pObject.isVipIdModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getVipId());
                }

                if (pObject.isSaleIdModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getSaleId());
                }

                if (pObject.isCrDateModified()) {
                      if (pObject.getCrDate() == null) ps.setNull(++_dirtyCount, Types.TIMESTAMP); else ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(pObject.getCrDate().getTime()));
                }

                if (pObject.isSaleSeqModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getSaleSeq());
                }

                if (pObject.isIsCloseModified()) {
                      ps.setString(++_dirtyCount, pObject.getIsClose());
                }

                if (pObject.isUpdDateModified()) {
                      if (pObject.getUpdDate() == null) ps.setNull(++_dirtyCount, Types.TIMESTAMP); else ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(pObject.getUpdDate().getTime()));
                }

                if (_dirtyCount == 0) {
                     return pObject;
                }

                Manager.setLong(ps, ++_dirtyCount, pObject.getItemSeq());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }

            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of SmTbSaleItemBean pObjects into the database.
     *
     * @param pObjects the SmTbSaleItemBean pObject table to be saved
     * @return the saved SmTbSaleItemBean array.
     */
    //65
    public SmTbSaleItemBean[] save(SmTbSaleItemBean[] pObjects) throws SQLException
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique SmTbSaleItemBean pObject from a template one giving a c
     *
     * @param pObject the SmTbSaleItemBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public SmTbSaleItemBean loadUniqueUsingTemplate(SmTbSaleItemBean pObject) throws SQLException
    {
         SmTbSaleItemBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of SmTbSaleItemBean from a template one.
     *
     * @param pObject the SmTbSaleItemBean template to look for
     * @return all the SmTbSaleItemBean matching the template
     */
    //88
    public SmTbSaleItemBean[] loadUsingTemplate(SmTbSaleItemBean pObject) throws SQLException
    {
        return loadUsingTemplate(pObject, 1, -1);
    }
    /**
     * Loads an array of SmTbSaleItemBean from a template one, given the start row and number of rows.
     *
     * @param pObject the SmTbSaleItemBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the SmTbSaleItemBean matching the template
     */
    //88.5
    public SmTbSaleItemBean[] loadUsingTemplate(SmTbSaleItemBean pObject, int startRow, int numRows) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from sm_tb_sale_item WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;

             if (pObject.isItemSeqModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("item_seq= ?");
             }

             if (pObject.isPrdIdModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("prd_id= ?");
             }

             if (pObject.isCountModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("count= ?");
             }

             if (pObject.isPrdUnitPriceModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("prd_unit_price= ?");
             }

             if (pObject.isPrdDiscountPriceModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("prd_discount_price= ?");
             }

             if (pObject.isVipIdModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("vip_id= ?");
             }

             if (pObject.isSaleIdModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sale_id= ?");
             }

             if (pObject.isCrDateModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("cr_date= ?");
             }

             if (pObject.isSaleSeqModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sale_seq= ?");
             }

             if (pObject.isIsCloseModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("is_close= ?");
             }

             if (pObject.isUpdDateModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("upd_date= ?");
             }

             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;

             if (pObject.isItemSeqModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getItemSeq());
             }

             if (pObject.isPrdIdModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getPrdId());
             }

             if (pObject.isCountModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getCount());
             }

             if (pObject.isPrdUnitPriceModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getPrdUnitPrice());
             }

             if (pObject.isPrdDiscountPriceModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getPrdDiscountPrice());
             }

             if (pObject.isVipIdModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getVipId());
             }

             if (pObject.isSaleIdModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getSaleId());
             }

             if (pObject.isCrDateModified()) {
                 if (pObject.getCrDate() == null) ps.setNull(++_dirtyCount, Types.TIMESTAMP); else ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(pObject.getCrDate().getTime()));
             }

             if (pObject.isSaleSeqModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getSaleSeq());
             }

             if (pObject.isIsCloseModified()) {
                 ps.setString(++_dirtyCount, pObject.getIsClose());
             }

             if (pObject.isUpdDateModified()) {
                 if (pObject.getUpdDate() == null) ps.setNull(++_dirtyCount, Types.TIMESTAMP); else ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(pObject.getUpdDate().getTime()));
             }

             ps.executeQuery();
             return loadByPreparedStatement(ps, null, startRow, numRows);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a SmTbSaleItemBean template.
     *
     * @param pObject the SmTbSaleItemBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(SmTbSaleItemBean pObject) throws SQLException
    {
        if (pObject.isItemSeqInitialized())
            return deleteByPrimaryKey(pObject.getItemSeq());

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            sql = new StringBuffer("DELETE FROM sm_tb_sale_item WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isItemSeqInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("item_seq").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isPrdIdInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("prd_id").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isCountInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("count").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isPrdUnitPriceInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("prd_unit_price").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isPrdDiscountPriceInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("prd_discount_price").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isVipIdInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("vip_id").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isSaleIdInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("sale_id").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isCrDateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("cr_date").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isSaleSeqInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("sale_seq").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isIsCloseInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("is_close").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isUpdDateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("upd_date").append("=?");
                _dirtyAnd ++;
            }

            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;

            if (pObject.isItemSeqInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getItemSeq());
            }

            if (pObject.isPrdIdInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getPrdId());
            }

            if (pObject.isCountInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getCount());
            }

            if (pObject.isPrdUnitPriceInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getPrdUnitPrice());
            }

            if (pObject.isPrdDiscountPriceInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getPrdDiscountPrice());
            }

            if (pObject.isVipIdInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getVipId());
            }

            if (pObject.isSaleIdInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getSaleId());
            }

            if (pObject.isCrDateInitialized()) {
                if (pObject.getCrDate() == null) ps.setNull(++_dirtyCount, Types.TIMESTAMP); else ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(pObject.getCrDate().getTime()));
            }

            if (pObject.isSaleSeqInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getSaleSeq());
            }

            if (pObject.isIsCloseInitialized()) {
                ps.setString(++_dirtyCount, pObject.getIsClose());
            }

            if (pObject.isUpdDateInitialized()) {
                if (pObject.getUpdDate() == null) ps.setNull(++_dirtyCount, Types.TIMESTAMP); else ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(pObject.getUpdDate().getTime()));
            }

            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table sm_tb_sale_item.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table sm_tb_sale_item with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from sm_tb_sale_item " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = getConnection();
            pStatement = c.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table sm_tb_sale_item with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific SmTbSaleItemBean pObject given a c
     *
     * @param pObject the SmTbSaleItemBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(SmTbSaleItemBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;

        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from sm_tb_sale_item WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;

                if (pObject.isItemSeqModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("item_seq= ?");
                }

                if (pObject.isPrdIdModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("prd_id= ?");
                }

                if (pObject.isCountModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("count= ?");
                }

                if (pObject.isPrdUnitPriceModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("prd_unit_price= ?");
                }

                if (pObject.isPrdDiscountPriceModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("prd_discount_price= ?");
                }

                if (pObject.isVipIdModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("vip_id= ?");
                }

                if (pObject.isSaleIdModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sale_id= ?");
                }

                if (pObject.isCrDateModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("cr_date= ?");
                }

                if (pObject.isSaleSeqModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sale_seq= ?");
                }

                if (pObject.isIsCloseModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("is_close= ?");
                }

                if (pObject.isUpdDateModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("upd_date= ?");
                }

                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");

                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

                _dirtyCount = 0;

                if (pObject.isItemSeqModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getItemSeq());
                }

                if (pObject.isPrdIdModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getPrdId());
                }

                if (pObject.isCountModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getCount());
                }

                if (pObject.isPrdUnitPriceModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getPrdUnitPrice());
                }

                if (pObject.isPrdDiscountPriceModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getPrdDiscountPrice());
                }

                if (pObject.isVipIdModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getVipId());
                }

                if (pObject.isSaleIdModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getSaleId());
                }

                if (pObject.isCrDateModified()) {
                    if (pObject.getCrDate() == null) ps.setNull(++_dirtyCount, Types.TIMESTAMP); else ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(pObject.getCrDate().getTime()));
                }

                if (pObject.isSaleSeqModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getSaleSeq());
                }

                if (pObject.isIsCloseModified()) {
                    ps.setString(++_dirtyCount, pObject.getIsClose());
                }

                if (pObject.isUpdDateModified()) {
                    if (pObject.getUpdDate() == null) ps.setNull(++_dirtyCount, Types.TIMESTAMP); else ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(pObject.getUpdDate().getTime()));
                }

                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the sm_tb_sale_item on a SmTbSaleItemBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting SmTbSaleItemBean pObject
     */
    //72
    public SmTbSaleItemBean decodeRow(ResultSet rs) throws SQLException
    {
        SmTbSaleItemBean pObject = createSmTbSaleItemBean();
        pObject.setItemSeq(Manager.getLong(rs, 1));
        pObject.setPrdId(Manager.getLong(rs, 2));
        pObject.setCount(Manager.getLong(rs, 3));
        pObject.setPrdUnitPrice(Manager.getLong(rs, 4));
        pObject.setPrdDiscountPrice(Manager.getLong(rs, 5));
        pObject.setVipId(Manager.getLong(rs, 6));
        pObject.setSaleId(Manager.getLong(rs, 7));
        pObject.setCrDate(rs.getTimestamp(8));
        pObject.setSaleSeq(Manager.getLong(rs, 9));
        pObject.setIsClose(rs.getString(10));
        pObject.setUpdDate(rs.getTimestamp(11));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the sm_tb_sale_item table on a SmTbSaleItemBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting SmTbSaleItemBean pObject
     */
    //73
    public SmTbSaleItemBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        SmTbSaleItemBean pObject = createSmTbSaleItemBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_ITEM_SEQ:
                    ++pos;
                    pObject.setItemSeq(Manager.getLong(rs, pos));
                    break;
                case ID_PRD_ID:
                    ++pos;
                    pObject.setPrdId(Manager.getLong(rs, pos));
                    break;
                case ID_COUNT:
                    ++pos;
                    pObject.setCount(Manager.getLong(rs, pos));
                    break;
                case ID_PRD_UNIT_PRICE:
                    ++pos;
                    pObject.setPrdUnitPrice(Manager.getLong(rs, pos));
                    break;
                case ID_PRD_DISCOUNT_PRICE:
                    ++pos;
                    pObject.setPrdDiscountPrice(Manager.getLong(rs, pos));
                    break;
                case ID_VIP_ID:
                    ++pos;
                    pObject.setVipId(Manager.getLong(rs, pos));
                    break;
                case ID_SALE_ID:
                    ++pos;
                    pObject.setSaleId(Manager.getLong(rs, pos));
                    break;
                case ID_CR_DATE:
                    ++pos;
                    pObject.setCrDate(rs.getTimestamp(pos));
                    break;
                case ID_SALE_SEQ:
                    ++pos;
                    pObject.setSaleSeq(Manager.getLong(rs, pos));
                    break;
                case ID_IS_CLOSE:
                    ++pos;
                    pObject.setIsClose(rs.getString(pos));
                    break;
                case ID_UPD_DATE:
                    ++pos;
                    pObject.setUpdDate(rs.getTimestamp(pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of SmTbSaleItemBean
     */
    //41
    public SmTbSaleItemBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of SmTbSaleItemBean
     */
    public SmTbSaleItemBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        return loadByPreparedStatement(ps, fieldList, 1, -1);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of SmTbSaleItemBean
     */
    //41.5
    public SmTbSaleItemBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            int count = 0;
            if (rs.absolute(startRow) && numRows!=0) {
                do
                {
                    if(fieldList == null)
                        v.add(decodeRow(rs));
                    else
                        v.add(decodeRow(rs, fieldList));
                    count++;
                } while ( (count<numRows||numRows<0) && rs.next() );
            }
            return (SmTbSaleItemBean[])v.toArray(new SmTbSaleItemBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER
    ///////////////////////////////////////////////////////////////////////
    private SmTbSaleItemListener listener = null;

    /**
     * Registers a unique SmTbSaleItemListener listener.
     */
    //66.5
    public void registerListener(SmTbSaleItemListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the SmTbSaleItemBean pObject.
     *
     * @param pObject the SmTbSaleItemBean pObject to be saved
     */
    //67
    void beforeInsert(SmTbSaleItemBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the SmTbSaleItemBean pObject.
     *
     * @param pObject the SmTbSaleItemBean pObject to be saved
     */
    //68
    void afterInsert(SmTbSaleItemBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the SmTbSaleItemBean pObject.
     *
     * @param pObject the SmTbSaleItemBean pObject to be updated
     */
    //69
    void beforeUpdate(SmTbSaleItemBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the SmTbSaleItemBean pObject.
     *
     * @param pObject the SmTbSaleItemBean pObject to be updated
     */
    //70
    void afterUpdate(SmTbSaleItemBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 
}
