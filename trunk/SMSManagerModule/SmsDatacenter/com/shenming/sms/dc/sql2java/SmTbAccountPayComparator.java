// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.shenming.sms.dc.sql2java;

import java.util.Comparator;
// imports+ 

// imports- 

/**
 * Comparator class is used to sort the SmTbAccountPayBean objects.
 */
public class SmTbAccountPayComparator implements Comparator
// extends+ 

// extends- 
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for SmTbAccountPayComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new SmTbAccountPayComparator(SmTbAccountPayManager.INDEX, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>SmTbAccountPayManager.ID_INDEX
     *   <li>SmTbAccountPayManager.ID_USER_ID
     *   <li>SmTbAccountPayManager.ID_PAYED
     *   <li>SmTbAccountPayManager.ID_CREATE_DATE
     *   <li>SmTbAccountPayManager.ID_CREATE_USER
     *   <li>SmTbAccountPayManager.ID_MODIFY_DATE
     *   <li>SmTbAccountPayManager.ID_MODIFY_USER
     * </ul>
     */
    public SmTbAccountPayComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for SmTbAccountPayComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new SmTbAccountPayComparator(SmTbAccountPayManager.INDEX, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>SmTbAccountPayManager.ID_INDEX
     *   <li>SmTbAccountPayManager.ID_USER_ID
     *   <li>SmTbAccountPayManager.ID_PAYED
     *   <li>SmTbAccountPayManager.ID_CREATE_DATE
     *   <li>SmTbAccountPayManager.ID_CREATE_USER
     *   <li>SmTbAccountPayManager.ID_MODIFY_DATE
     *   <li>SmTbAccountPayManager.ID_MODIFY_USER
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public SmTbAccountPayComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        SmTbAccountPayBean b1 = (SmTbAccountPayBean)pObj1;
        SmTbAccountPayBean b2 = (SmTbAccountPayBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case SmTbAccountPayManager.ID_INDEX:
                if (b1.getIndex() == null && b2.getIndex() != null) {
                    iReturn = -1;
                } else if (b1.getIndex() == null && b2.getIndex() == null) {
                    iReturn = 0;
                } else if (b1.getIndex() != null && b2.getIndex() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getIndex().compareTo(b2.getIndex());
                }
                break;
            case SmTbAccountPayManager.ID_USER_ID:
                if (b1.getUserId() == null && b2.getUserId() != null) {
                    iReturn = -1;
                } else if (b1.getUserId() == null && b2.getUserId() == null) {
                    iReturn = 0;
                } else if (b1.getUserId() != null && b2.getUserId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getUserId().compareTo(b2.getUserId());
                }
                break;
            case SmTbAccountPayManager.ID_PAYED:
                if (b1.getPayed() == null && b2.getPayed() != null) {
                    iReturn = -1;
                } else if (b1.getPayed() == null && b2.getPayed() == null) {
                    iReturn = 0;
                } else if (b1.getPayed() != null && b2.getPayed() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getPayed().compareTo(b2.getPayed());
                }
                break;
            case SmTbAccountPayManager.ID_CREATE_DATE:
                if (b1.getCreateDate() == null && b2.getCreateDate() != null) {
                    iReturn = -1;
                } else if (b1.getCreateDate() == null && b2.getCreateDate() == null) {
                    iReturn = 0;
                } else if (b1.getCreateDate() != null && b2.getCreateDate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getCreateDate().compareTo(b2.getCreateDate());
                }
                break;
            case SmTbAccountPayManager.ID_CREATE_USER:
                if (b1.getCreateUser() == null && b2.getCreateUser() != null) {
                    iReturn = -1;
                } else if (b1.getCreateUser() == null && b2.getCreateUser() == null) {
                    iReturn = 0;
                } else if (b1.getCreateUser() != null && b2.getCreateUser() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getCreateUser().compareTo(b2.getCreateUser());
                }
                break;
            case SmTbAccountPayManager.ID_MODIFY_DATE:
                if (b1.getModifyDate() == null && b2.getModifyDate() != null) {
                    iReturn = -1;
                } else if (b1.getModifyDate() == null && b2.getModifyDate() == null) {
                    iReturn = 0;
                } else if (b1.getModifyDate() != null && b2.getModifyDate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getModifyDate().compareTo(b2.getModifyDate());
                }
                break;
            case SmTbAccountPayManager.ID_MODIFY_USER:
                if (b1.getModifyUser() == null && b2.getModifyUser() != null) {
                    iReturn = -1;
                } else if (b1.getModifyUser() == null && b2.getModifyUser() == null) {
                    iReturn = 0;
                } else if (b1.getModifyUser() != null && b2.getModifyUser() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getModifyUser().compareTo(b2.getModifyUser());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
// class+ 

// class- 
}
