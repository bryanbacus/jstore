// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.shenming.sms.dc.sql2java;

import java.util.Comparator;
// imports+ 

// imports- 

/**
 * Comparator class is used to sort the SmTbVipAccountBean objects.
 */
public class SmTbVipAccountComparator implements Comparator
// extends+ 

// extends- 
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for SmTbVipAccountComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new SmTbVipAccountComparator(SmTbVipAccountManager.SM_VIP_SEQ, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>SmTbVipAccountManager.ID_SM_VIP_SEQ
     *   <li>SmTbVipAccountManager.ID_VIP_CHT_NAME
     *   <li>SmTbVipAccountManager.ID_VIP_ENG_NAME
     *   <li>SmTbVipAccountManager.ID_BIRTHDAY
     *   <li>SmTbVipAccountManager.ID_SEX
     *   <li>SmTbVipAccountManager.ID_BLOOD
     *   <li>SmTbVipAccountManager.ID_MARRAGE
     *   <li>SmTbVipAccountManager.ID_ADDRESS
     *   <li>SmTbVipAccountManager.ID_PHONE
     *   <li>SmTbVipAccountManager.ID_MOBILE
     *   <li>SmTbVipAccountManager.ID_MAIL_ADDR
     *   <li>SmTbVipAccountManager.ID_FOVARITE
     *   <li>SmTbVipAccountManager.ID_JOB
     *   <li>SmTbVipAccountManager.ID_CR_DATE
     *   <li>SmTbVipAccountManager.ID_BUY_SUM
     *   <li>SmTbVipAccountManager.ID_IS_VALID_VIP
     *   <li>SmTbVipAccountManager.ID_USERNAME
     *   <li>SmTbVipAccountManager.ID_PASSWORD
     *   <li>SmTbVipAccountManager.ID_ERROR_CNT
     *   <li>SmTbVipAccountManager.ID_OWNER
     * </ul>
     */
    public SmTbVipAccountComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for SmTbVipAccountComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new SmTbVipAccountComparator(SmTbVipAccountManager.SM_VIP_SEQ, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>SmTbVipAccountManager.ID_SM_VIP_SEQ
     *   <li>SmTbVipAccountManager.ID_VIP_CHT_NAME
     *   <li>SmTbVipAccountManager.ID_VIP_ENG_NAME
     *   <li>SmTbVipAccountManager.ID_BIRTHDAY
     *   <li>SmTbVipAccountManager.ID_SEX
     *   <li>SmTbVipAccountManager.ID_BLOOD
     *   <li>SmTbVipAccountManager.ID_MARRAGE
     *   <li>SmTbVipAccountManager.ID_ADDRESS
     *   <li>SmTbVipAccountManager.ID_PHONE
     *   <li>SmTbVipAccountManager.ID_MOBILE
     *   <li>SmTbVipAccountManager.ID_MAIL_ADDR
     *   <li>SmTbVipAccountManager.ID_FOVARITE
     *   <li>SmTbVipAccountManager.ID_JOB
     *   <li>SmTbVipAccountManager.ID_CR_DATE
     *   <li>SmTbVipAccountManager.ID_BUY_SUM
     *   <li>SmTbVipAccountManager.ID_IS_VALID_VIP
     *   <li>SmTbVipAccountManager.ID_USERNAME
     *   <li>SmTbVipAccountManager.ID_PASSWORD
     *   <li>SmTbVipAccountManager.ID_ERROR_CNT
     *   <li>SmTbVipAccountManager.ID_OWNER
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public SmTbVipAccountComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        SmTbVipAccountBean b1 = (SmTbVipAccountBean)pObj1;
        SmTbVipAccountBean b2 = (SmTbVipAccountBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case SmTbVipAccountManager.ID_SM_VIP_SEQ:
                if (b1.getSmVipSeq() == null && b2.getSmVipSeq() != null) {
                    iReturn = -1;
                } else if (b1.getSmVipSeq() == null && b2.getSmVipSeq() == null) {
                    iReturn = 0;
                } else if (b1.getSmVipSeq() != null && b2.getSmVipSeq() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getSmVipSeq().compareTo(b2.getSmVipSeq());
                }
                break;
            case SmTbVipAccountManager.ID_VIP_CHT_NAME:
                if (b1.getVipChtName() == null && b2.getVipChtName() != null) {
                    iReturn = -1;
                } else if (b1.getVipChtName() == null && b2.getVipChtName() == null) {
                    iReturn = 0;
                } else if (b1.getVipChtName() != null && b2.getVipChtName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getVipChtName().compareTo(b2.getVipChtName());
                }
                break;
            case SmTbVipAccountManager.ID_VIP_ENG_NAME:
                if (b1.getVipEngName() == null && b2.getVipEngName() != null) {
                    iReturn = -1;
                } else if (b1.getVipEngName() == null && b2.getVipEngName() == null) {
                    iReturn = 0;
                } else if (b1.getVipEngName() != null && b2.getVipEngName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getVipEngName().compareTo(b2.getVipEngName());
                }
                break;
            case SmTbVipAccountManager.ID_BIRTHDAY:
                if (b1.getBirthday() == null && b2.getBirthday() != null) {
                    iReturn = -1;
                } else if (b1.getBirthday() == null && b2.getBirthday() == null) {
                    iReturn = 0;
                } else if (b1.getBirthday() != null && b2.getBirthday() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getBirthday().compareTo(b2.getBirthday());
                }
                break;
            case SmTbVipAccountManager.ID_SEX:
                if (b1.getSex() == null && b2.getSex() != null) {
                    iReturn = -1;
                } else if (b1.getSex() == null && b2.getSex() == null) {
                    iReturn = 0;
                } else if (b1.getSex() != null && b2.getSex() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getSex().compareTo(b2.getSex());
                }
                break;
            case SmTbVipAccountManager.ID_BLOOD:
                if (b1.getBlood() == null && b2.getBlood() != null) {
                    iReturn = -1;
                } else if (b1.getBlood() == null && b2.getBlood() == null) {
                    iReturn = 0;
                } else if (b1.getBlood() != null && b2.getBlood() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getBlood().compareTo(b2.getBlood());
                }
                break;
            case SmTbVipAccountManager.ID_MARRAGE:
                if (b1.getMarrage() == null && b2.getMarrage() != null) {
                    iReturn = -1;
                } else if (b1.getMarrage() == null && b2.getMarrage() == null) {
                    iReturn = 0;
                } else if (b1.getMarrage() != null && b2.getMarrage() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getMarrage().compareTo(b2.getMarrage());
                }
                break;
            case SmTbVipAccountManager.ID_ADDRESS:
                if (b1.getAddress() == null && b2.getAddress() != null) {
                    iReturn = -1;
                } else if (b1.getAddress() == null && b2.getAddress() == null) {
                    iReturn = 0;
                } else if (b1.getAddress() != null && b2.getAddress() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getAddress().compareTo(b2.getAddress());
                }
                break;
            case SmTbVipAccountManager.ID_PHONE:
                if (b1.getPhone() == null && b2.getPhone() != null) {
                    iReturn = -1;
                } else if (b1.getPhone() == null && b2.getPhone() == null) {
                    iReturn = 0;
                } else if (b1.getPhone() != null && b2.getPhone() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getPhone().compareTo(b2.getPhone());
                }
                break;
            case SmTbVipAccountManager.ID_MOBILE:
                if (b1.getMobile() == null && b2.getMobile() != null) {
                    iReturn = -1;
                } else if (b1.getMobile() == null && b2.getMobile() == null) {
                    iReturn = 0;
                } else if (b1.getMobile() != null && b2.getMobile() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getMobile().compareTo(b2.getMobile());
                }
                break;
            case SmTbVipAccountManager.ID_MAIL_ADDR:
                if (b1.getMailAddr() == null && b2.getMailAddr() != null) {
                    iReturn = -1;
                } else if (b1.getMailAddr() == null && b2.getMailAddr() == null) {
                    iReturn = 0;
                } else if (b1.getMailAddr() != null && b2.getMailAddr() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getMailAddr().compareTo(b2.getMailAddr());
                }
                break;
            case SmTbVipAccountManager.ID_FOVARITE:
                if (b1.getFovarite() == null && b2.getFovarite() != null) {
                    iReturn = -1;
                } else if (b1.getFovarite() == null && b2.getFovarite() == null) {
                    iReturn = 0;
                } else if (b1.getFovarite() != null && b2.getFovarite() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getFovarite().compareTo(b2.getFovarite());
                }
                break;
            case SmTbVipAccountManager.ID_JOB:
                if (b1.getJob() == null && b2.getJob() != null) {
                    iReturn = -1;
                } else if (b1.getJob() == null && b2.getJob() == null) {
                    iReturn = 0;
                } else if (b1.getJob() != null && b2.getJob() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getJob().compareTo(b2.getJob());
                }
                break;
            case SmTbVipAccountManager.ID_CR_DATE:
                if (b1.getCrDate() == null && b2.getCrDate() != null) {
                    iReturn = -1;
                } else if (b1.getCrDate() == null && b2.getCrDate() == null) {
                    iReturn = 0;
                } else if (b1.getCrDate() != null && b2.getCrDate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getCrDate().compareTo(b2.getCrDate());
                }
                break;
            case SmTbVipAccountManager.ID_BUY_SUM:
                if (b1.getBuySum() == null && b2.getBuySum() != null) {
                    iReturn = -1;
                } else if (b1.getBuySum() == null && b2.getBuySum() == null) {
                    iReturn = 0;
                } else if (b1.getBuySum() != null && b2.getBuySum() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getBuySum().compareTo(b2.getBuySum());
                }
                break;
            case SmTbVipAccountManager.ID_IS_VALID_VIP:
                if (b1.getIsValidVip() == null && b2.getIsValidVip() != null) {
                    iReturn = -1;
                } else if (b1.getIsValidVip() == null && b2.getIsValidVip() == null) {
                    iReturn = 0;
                } else if (b1.getIsValidVip() != null && b2.getIsValidVip() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getIsValidVip().compareTo(b2.getIsValidVip());
                }
                break;
            case SmTbVipAccountManager.ID_USERNAME:
                if (b1.getUsername() == null && b2.getUsername() != null) {
                    iReturn = -1;
                } else if (b1.getUsername() == null && b2.getUsername() == null) {
                    iReturn = 0;
                } else if (b1.getUsername() != null && b2.getUsername() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getUsername().compareTo(b2.getUsername());
                }
                break;
            case SmTbVipAccountManager.ID_PASSWORD:
                if (b1.getPassword() == null && b2.getPassword() != null) {
                    iReturn = -1;
                } else if (b1.getPassword() == null && b2.getPassword() == null) {
                    iReturn = 0;
                } else if (b1.getPassword() != null && b2.getPassword() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getPassword().compareTo(b2.getPassword());
                }
                break;
            case SmTbVipAccountManager.ID_ERROR_CNT:
                if (b1.getErrorCnt() == null && b2.getErrorCnt() != null) {
                    iReturn = -1;
                } else if (b1.getErrorCnt() == null && b2.getErrorCnt() == null) {
                    iReturn = 0;
                } else if (b1.getErrorCnt() != null && b2.getErrorCnt() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getErrorCnt().compareTo(b2.getErrorCnt());
                }
                break;
            case SmTbVipAccountManager.ID_OWNER:
                if (b1.getOwner() == null && b2.getOwner() != null) {
                    iReturn = -1;
                } else if (b1.getOwner() == null && b2.getOwner() == null) {
                    iReturn = 0;
                } else if (b1.getOwner() != null && b2.getOwner() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getOwner().compareTo(b2.getOwner());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
// class+ 

// class- 
}
