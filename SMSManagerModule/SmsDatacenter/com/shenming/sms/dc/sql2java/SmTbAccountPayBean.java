// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.shenming.sms.dc.sql2java;

// imports+ 

// imports- 

/**
 * SmTbAccountPayBean is a mapping of sm_tb_account_pay Table.
*/
public class SmTbAccountPayBean
// extends+ 

// extends- 
{

    private Integer index;
    private boolean index_is_modified = false;
    private boolean index_is_initialized = false;


    private Long userId;
    private boolean userId_is_modified = false;
    private boolean userId_is_initialized = false;


    private Integer payed;
    private boolean payed_is_modified = false;
    private boolean payed_is_initialized = false;


    private java.util.Date createDate;
    private boolean createDate_is_modified = false;
    private boolean createDate_is_initialized = false;


    private Long createUser;
    private boolean createUser_is_modified = false;
    private boolean createUser_is_initialized = false;


    private java.util.Date modifyDate;
    private boolean modifyDate_is_modified = false;
    private boolean modifyDate_is_initialized = false;


    private Long modifyUser;
    private boolean modifyUser_is_modified = false;
    private boolean modifyUser_is_initialized = false;

    private boolean _isNew = true;

    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    SmTbAccountPayBean()
    {
    }

    /**
     * Getter method for index.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_tb_account_pay.index
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of index
     */
    public Integer getIndex()
    {
        return index;
    }

    /**
     * Setter method for index.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to index
     */
    public void setIndex(Integer newVal) {
        if ((newVal != null && this.index != null && (newVal.compareTo(this.index) == 0)) ||
            (newVal == null && this.index == null && index_is_initialized)) {
            return;
        }
        this.index = newVal;
        index_is_modified = true;
        index_is_initialized = true;
    }

    /**
     * Setter method for index.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to index
     */
    public void setIndex(int newVal) {
        setIndex(new Integer(newVal));
    }

    /**
     * Determines if the index has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isIndexModified() {
        return index_is_modified;
    }

    /**
     * Determines if the index has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isIndexInitialized() {
        return index_is_initialized;
    }

    /**
     * Getter method for userId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_tb_account_pay.user_id
     * <li>comments: The payed user id.
     * <li>column size: 22
     * <li>jdbc type returned by the driver: Types.DECIMAL
     * </ul>
     *
     * @return the value of userId
     */
    public Long getUserId()
    {
        return userId;
    }

    /**
     * Setter method for userId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to userId
     */
    public void setUserId(Long newVal) {
        if ((newVal != null && this.userId != null && (newVal.compareTo(this.userId) == 0)) ||
            (newVal == null && this.userId == null && userId_is_initialized)) {
            return;
        }
        this.userId = newVal;
        userId_is_modified = true;
        userId_is_initialized = true;
    }

    /**
     * Setter method for userId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to userId
     */
    public void setUserId(long newVal) {
        setUserId(new Long(newVal));
    }

    /**
     * Determines if the userId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isUserIdModified() {
        return userId_is_modified;
    }

    /**
     * Determines if the userId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isUserIdInitialized() {
        return userId_is_initialized;
    }

    /**
     * Getter method for payed.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_tb_account_pay.payed
     * <li>comments: The payed money
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of payed
     */
    public Integer getPayed()
    {
        return payed;
    }

    /**
     * Setter method for payed.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to payed
     */
    public void setPayed(Integer newVal) {
        if ((newVal != null && this.payed != null && (newVal.compareTo(this.payed) == 0)) ||
            (newVal == null && this.payed == null && payed_is_initialized)) {
            return;
        }
        this.payed = newVal;
        payed_is_modified = true;
        payed_is_initialized = true;
    }

    /**
     * Setter method for payed.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to payed
     */
    public void setPayed(int newVal) {
        setPayed(new Integer(newVal));
    }

    /**
     * Determines if the payed has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPayedModified() {
        return payed_is_modified;
    }

    /**
     * Determines if the payed has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPayedInitialized() {
        return payed_is_initialized;
    }

    /**
     * Getter method for createDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_tb_account_pay.create_date
     * <li>comments: The record create date
     * <li>column size: 0
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of createDate
     */
    public java.util.Date getCreateDate()
    {
        return createDate;
    }

    /**
     * Setter method for createDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to createDate
     */
    public void setCreateDate(java.util.Date newVal) {
        if ((newVal != null && this.createDate != null && (newVal.compareTo(this.createDate) == 0)) ||
            (newVal == null && this.createDate == null && createDate_is_initialized)) {
            return;
        }
        this.createDate = newVal;
        createDate_is_modified = true;
        createDate_is_initialized = true;
    }

    /**
     * Setter method for createDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to createDate
     */
    public void setCreateDate(long newVal) {
        setCreateDate(new java.util.Date(newVal));
    }

    /**
     * Determines if the createDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCreateDateModified() {
        return createDate_is_modified;
    }

    /**
     * Determines if the createDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCreateDateInitialized() {
        return createDate_is_initialized;
    }

    /**
     * Getter method for createUser.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_tb_account_pay.create_user
     * <li>comments: The record create user
     * <li>column size: 22
     * <li>jdbc type returned by the driver: Types.DECIMAL
     * </ul>
     *
     * @return the value of createUser
     */
    public Long getCreateUser()
    {
        return createUser;
    }

    /**
     * Setter method for createUser.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to createUser
     */
    public void setCreateUser(Long newVal) {
        if ((newVal != null && this.createUser != null && (newVal.compareTo(this.createUser) == 0)) ||
            (newVal == null && this.createUser == null && createUser_is_initialized)) {
            return;
        }
        this.createUser = newVal;
        createUser_is_modified = true;
        createUser_is_initialized = true;
    }

    /**
     * Setter method for createUser.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to createUser
     */
    public void setCreateUser(long newVal) {
        setCreateUser(new Long(newVal));
    }

    /**
     * Determines if the createUser has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCreateUserModified() {
        return createUser_is_modified;
    }

    /**
     * Determines if the createUser has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCreateUserInitialized() {
        return createUser_is_initialized;
    }

    /**
     * Getter method for modifyDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_tb_account_pay.modify_date
     * <li>comments: The record modify date
     * <li>column size: 0
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of modifyDate
     */
    public java.util.Date getModifyDate()
    {
        return modifyDate;
    }

    /**
     * Setter method for modifyDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to modifyDate
     */
    public void setModifyDate(java.util.Date newVal) {
        if ((newVal != null && this.modifyDate != null && (newVal.compareTo(this.modifyDate) == 0)) ||
            (newVal == null && this.modifyDate == null && modifyDate_is_initialized)) {
            return;
        }
        this.modifyDate = newVal;
        modifyDate_is_modified = true;
        modifyDate_is_initialized = true;
    }

    /**
     * Setter method for modifyDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to modifyDate
     */
    public void setModifyDate(long newVal) {
        setModifyDate(new java.util.Date(newVal));
    }

    /**
     * Determines if the modifyDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isModifyDateModified() {
        return modifyDate_is_modified;
    }

    /**
     * Determines if the modifyDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isModifyDateInitialized() {
        return modifyDate_is_initialized;
    }

    /**
     * Getter method for modifyUser.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_tb_account_pay.modify_user
     * <li>comments: The record modify user
     * <li>column size: 22
     * <li>jdbc type returned by the driver: Types.DECIMAL
     * </ul>
     *
     * @return the value of modifyUser
     */
    public Long getModifyUser()
    {
        return modifyUser;
    }

    /**
     * Setter method for modifyUser.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to modifyUser
     */
    public void setModifyUser(Long newVal) {
        if ((newVal != null && this.modifyUser != null && (newVal.compareTo(this.modifyUser) == 0)) ||
            (newVal == null && this.modifyUser == null && modifyUser_is_initialized)) {
            return;
        }
        this.modifyUser = newVal;
        modifyUser_is_modified = true;
        modifyUser_is_initialized = true;
    }

    /**
     * Setter method for modifyUser.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to modifyUser
     */
    public void setModifyUser(long newVal) {
        setModifyUser(new Long(newVal));
    }

    /**
     * Determines if the modifyUser has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isModifyUserModified() {
        return modifyUser_is_modified;
    }

    /**
     * Determines if the modifyUser has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isModifyUserInitialized() {
        return modifyUser_is_initialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return index_is_modified ||
		userId_is_modified ||
		payed_is_modified ||
		createDate_is_modified ||
		createUser_is_modified ||
		modifyDate_is_modified ||
		modifyUser_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        index_is_modified = false;
        userId_is_modified = false;
        payed_is_modified = false;
        createDate_is_modified = false;
        createUser_is_modified = false;
        modifyDate_is_modified = false;
        modifyUser_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(SmTbAccountPayBean bean) {
        setIndex(bean.getIndex());
        setUserId(bean.getUserId());
        setPayed(bean.getPayed());
        setCreateDate(bean.getCreateDate());
        setCreateUser(bean.getCreateUser());
        setModifyDate(bean.getModifyDate());
        setModifyUser(bean.getModifyUser());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[sm_tb_account_pay] "
                 + "\n - sm_tb_account_pay.index = " + (index_is_initialized ? ("[" + (index == null ? null : index.toString()) + "]") : "not initialized") + ""
                 + "\n - sm_tb_account_pay.user_id = " + (userId_is_initialized ? ("[" + (userId == null ? null : userId.toString()) + "]") : "not initialized") + ""
                 + "\n - sm_tb_account_pay.payed = " + (payed_is_initialized ? ("[" + (payed == null ? null : payed.toString()) + "]") : "not initialized") + ""
                 + "\n - sm_tb_account_pay.create_date = " + (createDate_is_initialized ? ("[" + (createDate == null ? null : createDate.toString()) + "]") : "not initialized") + ""
                 + "\n - sm_tb_account_pay.create_user = " + (createUser_is_initialized ? ("[" + (createUser == null ? null : createUser.toString()) + "]") : "not initialized") + ""
                 + "\n - sm_tb_account_pay.modify_date = " + (modifyDate_is_initialized ? ("[" + (modifyDate == null ? null : modifyDate.toString()) + "]") : "not initialized") + ""
                 + "\n - sm_tb_account_pay.modify_user = " + (modifyUser_is_initialized ? ("[" + (modifyUser == null ? null : modifyUser.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
