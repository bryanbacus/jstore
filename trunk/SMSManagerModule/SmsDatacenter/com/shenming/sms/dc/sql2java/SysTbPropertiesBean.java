// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.shenming.sms.dc.sql2java;

// imports+ 

// imports- 

/**
 * SysTbPropertiesBean is a mapping of sys_tb_properties Table.
*/
public class SysTbPropertiesBean
// extends+ 

// extends- 
{

    private Integer idx;
    private boolean idx_is_modified = false;
    private boolean idx_is_initialized = false;


    private String keyName;
    private boolean keyName_is_modified = false;
    private boolean keyName_is_initialized = false;


    private String keyValue;
    private boolean keyValue_is_modified = false;
    private boolean keyValue_is_initialized = false;


    private String keyGroup;
    private boolean keyGroup_is_modified = false;
    private boolean keyGroup_is_initialized = false;


    private String description;
    private boolean description_is_modified = false;
    private boolean description_is_initialized = false;


    private java.util.Date modifyDate;
    private boolean modifyDate_is_modified = false;
    private boolean modifyDate_is_initialized = false;

    private boolean _isNew = true;

    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    SysTbPropertiesBean()
    {
    }

    /**
     * Getter method for idx.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sys_tb_properties.idx
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of idx
     */
    public Integer getIdx()
    {
        return idx;
    }

    /**
     * Setter method for idx.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to idx
     */
    public void setIdx(Integer newVal) {
        if ((newVal != null && this.idx != null && (newVal.compareTo(this.idx) == 0)) ||
            (newVal == null && this.idx == null && idx_is_initialized)) {
            return;
        }
        this.idx = newVal;
        idx_is_modified = true;
        idx_is_initialized = true;
    }

    /**
     * Setter method for idx.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to idx
     */
    public void setIdx(int newVal) {
        setIdx(new Integer(newVal));
    }

    /**
     * Determines if the idx has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isIdxModified() {
        return idx_is_modified;
    }

    /**
     * Determines if the idx has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isIdxInitialized() {
        return idx_is_initialized;
    }

    /**
     * Getter method for keyName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sys_tb_properties.key_name
     * <li>column size: 50
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of keyName
     */
    public String getKeyName()
    {
        return keyName;
    }

    /**
     * Setter method for keyName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to keyName
     */
    public void setKeyName(String newVal) {
        if ((newVal != null && this.keyName != null && (newVal.compareTo(this.keyName) == 0)) ||
            (newVal == null && this.keyName == null && keyName_is_initialized)) {
            return;
        }
        this.keyName = newVal;
        keyName_is_modified = true;
        keyName_is_initialized = true;
    }

    /**
     * Determines if the keyName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isKeyNameModified() {
        return keyName_is_modified;
    }

    /**
     * Determines if the keyName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isKeyNameInitialized() {
        return keyName_is_initialized;
    }

    /**
     * Getter method for keyValue.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sys_tb_properties.key_value
     * <li>column size: 200
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of keyValue
     */
    public String getKeyValue()
    {
        return keyValue;
    }

    /**
     * Setter method for keyValue.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to keyValue
     */
    public void setKeyValue(String newVal) {
        if ((newVal != null && this.keyValue != null && (newVal.compareTo(this.keyValue) == 0)) ||
            (newVal == null && this.keyValue == null && keyValue_is_initialized)) {
            return;
        }
        this.keyValue = newVal;
        keyValue_is_modified = true;
        keyValue_is_initialized = true;
    }

    /**
     * Determines if the keyValue has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isKeyValueModified() {
        return keyValue_is_modified;
    }

    /**
     * Determines if the keyValue has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isKeyValueInitialized() {
        return keyValue_is_initialized;
    }

    /**
     * Getter method for keyGroup.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sys_tb_properties.key_group
     * <li>column size: 20
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of keyGroup
     */
    public String getKeyGroup()
    {
        return keyGroup;
    }

    /**
     * Setter method for keyGroup.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to keyGroup
     */
    public void setKeyGroup(String newVal) {
        if ((newVal != null && this.keyGroup != null && (newVal.compareTo(this.keyGroup) == 0)) ||
            (newVal == null && this.keyGroup == null && keyGroup_is_initialized)) {
            return;
        }
        this.keyGroup = newVal;
        keyGroup_is_modified = true;
        keyGroup_is_initialized = true;
    }

    /**
     * Determines if the keyGroup has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isKeyGroupModified() {
        return keyGroup_is_modified;
    }

    /**
     * Determines if the keyGroup has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isKeyGroupInitialized() {
        return keyGroup_is_initialized;
    }

    /**
     * Getter method for description.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sys_tb_properties.description
     * <li>column size: 200
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of description
     */
    public String getDescription()
    {
        return description;
    }

    /**
     * Setter method for description.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to description
     */
    public void setDescription(String newVal) {
        if ((newVal != null && this.description != null && (newVal.compareTo(this.description) == 0)) ||
            (newVal == null && this.description == null && description_is_initialized)) {
            return;
        }
        this.description = newVal;
        description_is_modified = true;
        description_is_initialized = true;
    }

    /**
     * Determines if the description has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDescriptionModified() {
        return description_is_modified;
    }

    /**
     * Determines if the description has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDescriptionInitialized() {
        return description_is_initialized;
    }

    /**
     * Getter method for modifyDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sys_tb_properties.modify_date
     * <li>column size: 0
     * <li>jdbc type returned by the driver: Types.DATE
     * </ul>
     *
     * @return the value of modifyDate
     */
    public java.util.Date getModifyDate()
    {
        return modifyDate;
    }

    /**
     * Setter method for modifyDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to modifyDate
     */
    public void setModifyDate(java.util.Date newVal) {
        if ((newVal != null && this.modifyDate != null && (newVal.compareTo(this.modifyDate) == 0)) ||
            (newVal == null && this.modifyDate == null && modifyDate_is_initialized)) {
            return;
        }
        this.modifyDate = newVal;
        modifyDate_is_modified = true;
        modifyDate_is_initialized = true;
    }

    /**
     * Setter method for modifyDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to modifyDate
     */
    public void setModifyDate(long newVal) {
        setModifyDate(new java.util.Date(newVal));
    }

    /**
     * Determines if the modifyDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isModifyDateModified() {
        return modifyDate_is_modified;
    }

    /**
     * Determines if the modifyDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isModifyDateInitialized() {
        return modifyDate_is_initialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return idx_is_modified ||
		keyName_is_modified ||
		keyValue_is_modified ||
		keyGroup_is_modified ||
		description_is_modified ||
		modifyDate_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        idx_is_modified = false;
        keyName_is_modified = false;
        keyValue_is_modified = false;
        keyGroup_is_modified = false;
        description_is_modified = false;
        modifyDate_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(SysTbPropertiesBean bean) {
        setIdx(bean.getIdx());
        setKeyName(bean.getKeyName());
        setKeyValue(bean.getKeyValue());
        setKeyGroup(bean.getKeyGroup());
        setDescription(bean.getDescription());
        setModifyDate(bean.getModifyDate());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[sys_tb_properties] "
                 + "\n - sys_tb_properties.idx = " + (idx_is_initialized ? ("[" + (idx == null ? null : idx.toString()) + "]") : "not initialized") + ""
                 + "\n - sys_tb_properties.key_name = " + (keyName_is_initialized ? ("[" + (keyName == null ? null : keyName.toString()) + "]") : "not initialized") + ""
                 + "\n - sys_tb_properties.key_value = " + (keyValue_is_initialized ? ("[" + (keyValue == null ? null : keyValue.toString()) + "]") : "not initialized") + ""
                 + "\n - sys_tb_properties.key_group = " + (keyGroup_is_initialized ? ("[" + (keyGroup == null ? null : keyGroup.toString()) + "]") : "not initialized") + ""
                 + "\n - sys_tb_properties.description = " + (description_is_initialized ? ("[" + (description == null ? null : description.toString()) + "]") : "not initialized") + ""
                 + "\n - sys_tb_properties.modify_date = " + (modifyDate_is_initialized ? ("[" + (modifyDate == null ? null : modifyDate.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
