// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.shenming.sms.dc.sql2java;

import java.util.Comparator;
// imports+ 

// imports- 

/**
 * Comparator class is used to sort the SmVwAccountSattlementBean objects.
 */
public class SmVwAccountSattlementComparator implements Comparator
// extends+ 

// extends- 
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for SmVwAccountSattlementComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new SmVwAccountSattlementComparator(SmVwAccountSattlementManager.SM_VIP_SEQ, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>SmVwAccountSattlementManager.ID_SM_VIP_SEQ
     *   <li>SmVwAccountSattlementManager.ID_USERNAME
     *   <li>SmVwAccountSattlementManager.ID_VIP_CHT_NAME
     *   <li>SmVwAccountSattlementManager.ID_PAY_SUM
     *   <li>SmVwAccountSattlementManager.ID_BUY_SUM
     *   <li>SmVwAccountSattlementManager.ID_SETTLEMENT
     * </ul>
     */
    public SmVwAccountSattlementComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for SmVwAccountSattlementComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new SmVwAccountSattlementComparator(SmVwAccountSattlementManager.SM_VIP_SEQ, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>SmVwAccountSattlementManager.ID_SM_VIP_SEQ
     *   <li>SmVwAccountSattlementManager.ID_USERNAME
     *   <li>SmVwAccountSattlementManager.ID_VIP_CHT_NAME
     *   <li>SmVwAccountSattlementManager.ID_PAY_SUM
     *   <li>SmVwAccountSattlementManager.ID_BUY_SUM
     *   <li>SmVwAccountSattlementManager.ID_SETTLEMENT
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public SmVwAccountSattlementComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        SmVwAccountSattlementBean b1 = (SmVwAccountSattlementBean)pObj1;
        SmVwAccountSattlementBean b2 = (SmVwAccountSattlementBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case SmVwAccountSattlementManager.ID_SM_VIP_SEQ:
                if (b1.getSmVipSeq() == null && b2.getSmVipSeq() != null) {
                    iReturn = -1;
                } else if (b1.getSmVipSeq() == null && b2.getSmVipSeq() == null) {
                    iReturn = 0;
                } else if (b1.getSmVipSeq() != null && b2.getSmVipSeq() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getSmVipSeq().compareTo(b2.getSmVipSeq());
                }
                break;
            case SmVwAccountSattlementManager.ID_USERNAME:
                if (b1.getUsername() == null && b2.getUsername() != null) {
                    iReturn = -1;
                } else if (b1.getUsername() == null && b2.getUsername() == null) {
                    iReturn = 0;
                } else if (b1.getUsername() != null && b2.getUsername() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getUsername().compareTo(b2.getUsername());
                }
                break;
            case SmVwAccountSattlementManager.ID_VIP_CHT_NAME:
                if (b1.getVipChtName() == null && b2.getVipChtName() != null) {
                    iReturn = -1;
                } else if (b1.getVipChtName() == null && b2.getVipChtName() == null) {
                    iReturn = 0;
                } else if (b1.getVipChtName() != null && b2.getVipChtName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getVipChtName().compareTo(b2.getVipChtName());
                }
                break;
            case SmVwAccountSattlementManager.ID_PAY_SUM:
                if (b1.getPaySum() == null && b2.getPaySum() != null) {
                    iReturn = -1;
                } else if (b1.getPaySum() == null && b2.getPaySum() == null) {
                    iReturn = 0;
                } else if (b1.getPaySum() != null && b2.getPaySum() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getPaySum().compareTo(b2.getPaySum());
                }
                break;
            case SmVwAccountSattlementManager.ID_BUY_SUM:
                if (b1.getBuySum() == null && b2.getBuySum() != null) {
                    iReturn = -1;
                } else if (b1.getBuySum() == null && b2.getBuySum() == null) {
                    iReturn = 0;
                } else if (b1.getBuySum() != null && b2.getBuySum() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getBuySum().compareTo(b2.getBuySum());
                }
                break;
            case SmVwAccountSattlementManager.ID_SETTLEMENT:
                if (b1.getSettlement() == null && b2.getSettlement() != null) {
                    iReturn = -1;
                } else if (b1.getSettlement() == null && b2.getSettlement() == null) {
                    iReturn = 0;
                } else if (b1.getSettlement() != null && b2.getSettlement() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getSettlement().compareTo(b2.getSettlement());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
// class+ 

// class- 
}
