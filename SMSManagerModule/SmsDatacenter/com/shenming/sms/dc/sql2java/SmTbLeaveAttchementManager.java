// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.shenming.sms.dc.sql2java;

import java.sql.*;
// imports+ 

// imports- 

/**
 * Handles database calls for the sm_tb_leave_attchement table.
 */
public class SmTbLeaveAttchementManager
// extends+ 

// extends- 
{

    /**
     * Column apply_id of type Types.BIGINT mapped to Long.
     */
    public static final int ID_APPLY_ID = 0;
    public static final int TYPE_APPLY_ID = Types.BIGINT;
    public static final String NAME_APPLY_ID = "apply_id";

    /**
     * Column file_path of type Types.VARCHAR mapped to String.
     */
    public static final int ID_FILE_PATH = 1;
    public static final int TYPE_FILE_PATH = Types.VARCHAR;
    public static final String NAME_FILE_PATH = "file_path";

    /**
     * Column file_name of type Types.VARCHAR mapped to String.
     */
    public static final int ID_FILE_NAME = 2;
    public static final int TYPE_FILE_NAME = Types.VARCHAR;
    public static final String NAME_FILE_NAME = "file_name";

    /**
     * Column description of type Types.VARCHAR mapped to String.
     */
    public static final int ID_DESCRIPTION = 3;
    public static final int TYPE_DESCRIPTION = Types.VARCHAR;
    public static final String NAME_DESCRIPTION = "description";

    /**
     * Column create_date of type Types.DATE mapped to java.util.Date.
     */
    public static final int ID_CREATE_DATE = 4;
    public static final int TYPE_CREATE_DATE = Types.DATE;
    public static final String NAME_CREATE_DATE = "create_date";


    private static final String TABLE_NAME = "sm_tb_leave_attchement";

    /**
     * Create an array of type string containing all the fields of the sm_tb_leave_attchement table.
     */
    private static final String[] FIELD_NAMES =
    {
        "sm_tb_leave_attchement.apply_id"
        ,"sm_tb_leave_attchement.file_path"
        ,"sm_tb_leave_attchement.file_name"
        ,"sm_tb_leave_attchement.description"
        ,"sm_tb_leave_attchement.create_date"
    };

    /**
     * Field that contains the comma separated fields of the sm_tb_leave_attchement table.
     */
    private static final String ALL_FIELDS = "sm_tb_leave_attchement.apply_id"
                            + ",sm_tb_leave_attchement.file_path"
                            + ",sm_tb_leave_attchement.file_name"
                            + ",sm_tb_leave_attchement.description"
                            + ",sm_tb_leave_attchement.create_date";

    private static SmTbLeaveAttchementManager singleton = new SmTbLeaveAttchementManager();

    /**
     * Get the SmTbLeaveAttchementManager singleton.
     *
     * @return SmTbLeaveAttchementManager
     */
    synchronized public static SmTbLeaveAttchementManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own SmTbLeaveAttchementManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(SmTbLeaveAttchementManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new SmTbLeaveAttchementBean instance.
     *
     * @return the new SmTbLeaveAttchementBean
     */
    public SmTbLeaveAttchementBean createSmTbLeaveAttchementBean()
    {
        return new SmTbLeaveAttchementBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a SmTbLeaveAttchementBean from the sm_tb_leave_attchement using its key fields.
     *
     * @return a unique SmTbLeaveAttchementBean
     */
    //12
    public SmTbLeaveAttchementBean loadByPrimaryKey(Long applyId) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM sm_tb_leave_attchement WHERE sm_tb_leave_attchement.apply_id=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, applyId);
            SmTbLeaveAttchementBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Long applyId) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from sm_tb_leave_attchement WHERE sm_tb_leave_attchement.apply_id=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, applyId);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from sm_tb_leave_attchement.
     *
     * @return an array of SmTbLeaveAttchementManager pObject
     */
    //38
    public SmTbLeaveAttchementBean[] loadAll() throws SQLException
    {
        return loadAll(1, -1);
    }


    /**
     * Loads the given number of rows from sm_tb_leave_attchement, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of SmTbLeaveAttchementManager pObject
     */
    //38.5
    public SmTbLeaveAttchementBean[] loadAll(int startRow, int numRows) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM sm_tb_leave_attchement",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps, null, startRow, numRows);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of SmTbLeaveAttchementBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting SmTbLeaveAttchementBean table
     */
    //49
    public SmTbLeaveAttchementBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of SmTbLeaveAttchementBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting SmTbLeaveAttchementBean table
     */
    //51
    public SmTbLeaveAttchementBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        return loadByWhere(where, null, 1, -1);
    }

    /**
     * Retrieves an array of SmTbLeaveAttchementBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return the resulting SmTbLeaveAttchementBean table
     */
    //51.5
    public SmTbLeaveAttchementBean[] loadByWhere(String where, int[] fieldList, int startRow, int numRows) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from sm_tb_leave_attchement " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from sm_tb_leave_attchement ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try
        {
            c = getConnection();
            pStatement = c.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            int count = 0;
            if (rs.absolute(startRow) && numRows!=0) {
                do
                {
                    if(fieldList == null)
                        v.add(decodeRow(rs));
                    else
                        v.add(decodeRow(rs, fieldList));
                    count++;
                } while ( (count<numRows||numRows<0) && rs.next() );
            }

            return (SmTbLeaveAttchementBean[])v.toArray(new SmTbLeaveAttchementBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from sm_tb_leave_attchement table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the sm_tb_leave_attchement table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM sm_tb_leave_attchement " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the SmTbLeaveAttchementBean pObject into the database.
     *
     * @param pObject the SmTbLeaveAttchementBean pObject to be saved
     */
    //100
    public SmTbLeaveAttchementBean save(SmTbLeaveAttchementBean pObject) throws SQLException
    {
        if (!pObject.isModified()) {
            return pObject; // should not we log something ?
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into sm_tb_leave_attchement (");

                if (pObject.isApplyIdModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("apply_id");
                    _dirtyCount++;
                }

                if (pObject.isFilePathModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("file_path");
                    _dirtyCount++;
                }

                if (pObject.isFileNameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("file_name");
                    _dirtyCount++;
                }

                if (pObject.isDescriptionModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("description");
                    _dirtyCount++;
                }

                if (pObject.isCreateDateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("create_date");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isApplyIdModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getApplyId());
                }

                if (pObject.isFilePathModified()) {
                    ps.setString(++_dirtyCount, pObject.getFilePath());
                }

                if (pObject.isFileNameModified()) {
                    ps.setString(++_dirtyCount, pObject.getFileName());
                }

                if (pObject.isDescriptionModified()) {
                    ps.setString(++_dirtyCount, pObject.getDescription());
                }

                if (pObject.isCreateDateModified()) {
                    if (pObject.getCreateDate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getCreateDate().getTime()));
                }

                ps.executeUpdate();

                if (!pObject.isApplyIdModified())
                {
                    PreparedStatement ps2 = null;
                    ResultSet rs = null;
                    try {
                        ps2 = c.prepareStatement("SELECT last_insert_id()");
                        rs = ps2.executeQuery();
                        if(rs.next()) {
                            pObject.setApplyId(Manager.getLong(rs, 1));
                        } else {
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                        }
                    } finally {
                        getManager().close(ps2, rs);
                    }
                }

                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else
            { // UPDATE
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE sm_tb_leave_attchement SET ");
                boolean useComma=false;

                if (pObject.isApplyIdModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("apply_id").append("=?");
                }

                if (pObject.isFilePathModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("file_path").append("=?");
                }

                if (pObject.isFileNameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("file_name").append("=?");
                }

                if (pObject.isDescriptionModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("description").append("=?");
                }

                if (pObject.isCreateDateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("create_date").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("sm_tb_leave_attchement.apply_id=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isApplyIdModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getApplyId());
                }

                if (pObject.isFilePathModified()) {
                      ps.setString(++_dirtyCount, pObject.getFilePath());
                }

                if (pObject.isFileNameModified()) {
                      ps.setString(++_dirtyCount, pObject.getFileName());
                }

                if (pObject.isDescriptionModified()) {
                      ps.setString(++_dirtyCount, pObject.getDescription());
                }

                if (pObject.isCreateDateModified()) {
                      if (pObject.getCreateDate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getCreateDate().getTime()));
                }

                if (_dirtyCount == 0) {
                     return pObject;
                }

                Manager.setLong(ps, ++_dirtyCount, pObject.getApplyId());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }

            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of SmTbLeaveAttchementBean pObjects into the database.
     *
     * @param pObjects the SmTbLeaveAttchementBean pObject table to be saved
     * @return the saved SmTbLeaveAttchementBean array.
     */
    //65
    public SmTbLeaveAttchementBean[] save(SmTbLeaveAttchementBean[] pObjects) throws SQLException
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique SmTbLeaveAttchementBean pObject from a template one giving a c
     *
     * @param pObject the SmTbLeaveAttchementBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public SmTbLeaveAttchementBean loadUniqueUsingTemplate(SmTbLeaveAttchementBean pObject) throws SQLException
    {
         SmTbLeaveAttchementBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of SmTbLeaveAttchementBean from a template one.
     *
     * @param pObject the SmTbLeaveAttchementBean template to look for
     * @return all the SmTbLeaveAttchementBean matching the template
     */
    //88
    public SmTbLeaveAttchementBean[] loadUsingTemplate(SmTbLeaveAttchementBean pObject) throws SQLException
    {
        return loadUsingTemplate(pObject, 1, -1);
    }
    /**
     * Loads an array of SmTbLeaveAttchementBean from a template one, given the start row and number of rows.
     *
     * @param pObject the SmTbLeaveAttchementBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the SmTbLeaveAttchementBean matching the template
     */
    //88.5
    public SmTbLeaveAttchementBean[] loadUsingTemplate(SmTbLeaveAttchementBean pObject, int startRow, int numRows) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from sm_tb_leave_attchement WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;

             if (pObject.isApplyIdModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("apply_id= ?");
             }

             if (pObject.isFilePathModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("file_path= ?");
             }

             if (pObject.isFileNameModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("file_name= ?");
             }

             if (pObject.isDescriptionModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("description= ?");
             }

             if (pObject.isCreateDateModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("create_date= ?");
             }

             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;

             if (pObject.isApplyIdModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getApplyId());
             }

             if (pObject.isFilePathModified()) {
                 ps.setString(++_dirtyCount, pObject.getFilePath());
             }

             if (pObject.isFileNameModified()) {
                 ps.setString(++_dirtyCount, pObject.getFileName());
             }

             if (pObject.isDescriptionModified()) {
                 ps.setString(++_dirtyCount, pObject.getDescription());
             }

             if (pObject.isCreateDateModified()) {
                 if (pObject.getCreateDate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getCreateDate().getTime()));
             }

             ps.executeQuery();
             return loadByPreparedStatement(ps, null, startRow, numRows);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a SmTbLeaveAttchementBean template.
     *
     * @param pObject the SmTbLeaveAttchementBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(SmTbLeaveAttchementBean pObject) throws SQLException
    {
        if (pObject.isApplyIdInitialized())
            return deleteByPrimaryKey(pObject.getApplyId());

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            sql = new StringBuffer("DELETE FROM sm_tb_leave_attchement WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isApplyIdInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("apply_id").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isFilePathInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("file_path").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isFileNameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("file_name").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isDescriptionInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("description").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isCreateDateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("create_date").append("=?");
                _dirtyAnd ++;
            }

            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;

            if (pObject.isApplyIdInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getApplyId());
            }

            if (pObject.isFilePathInitialized()) {
                ps.setString(++_dirtyCount, pObject.getFilePath());
            }

            if (pObject.isFileNameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getFileName());
            }

            if (pObject.isDescriptionInitialized()) {
                ps.setString(++_dirtyCount, pObject.getDescription());
            }

            if (pObject.isCreateDateInitialized()) {
                if (pObject.getCreateDate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getCreateDate().getTime()));
            }

            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table sm_tb_leave_attchement.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table sm_tb_leave_attchement with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from sm_tb_leave_attchement " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = getConnection();
            pStatement = c.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table sm_tb_leave_attchement with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific SmTbLeaveAttchementBean pObject given a c
     *
     * @param pObject the SmTbLeaveAttchementBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(SmTbLeaveAttchementBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;

        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from sm_tb_leave_attchement WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;

                if (pObject.isApplyIdModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("apply_id= ?");
                }

                if (pObject.isFilePathModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("file_path= ?");
                }

                if (pObject.isFileNameModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("file_name= ?");
                }

                if (pObject.isDescriptionModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("description= ?");
                }

                if (pObject.isCreateDateModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("create_date= ?");
                }

                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");

                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

                _dirtyCount = 0;

                if (pObject.isApplyIdModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getApplyId());
                }

                if (pObject.isFilePathModified()) {
                    ps.setString(++_dirtyCount, pObject.getFilePath());
                }

                if (pObject.isFileNameModified()) {
                    ps.setString(++_dirtyCount, pObject.getFileName());
                }

                if (pObject.isDescriptionModified()) {
                    ps.setString(++_dirtyCount, pObject.getDescription());
                }

                if (pObject.isCreateDateModified()) {
                    if (pObject.getCreateDate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getCreateDate().getTime()));
                }

                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the sm_tb_leave_attchement on a SmTbLeaveAttchementBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting SmTbLeaveAttchementBean pObject
     */
    //72
    public SmTbLeaveAttchementBean decodeRow(ResultSet rs) throws SQLException
    {
        SmTbLeaveAttchementBean pObject = createSmTbLeaveAttchementBean();
        pObject.setApplyId(Manager.getLong(rs, 1));
        pObject.setFilePath(rs.getString(2));
        pObject.setFileName(rs.getString(3));
        pObject.setDescription(rs.getString(4));
        pObject.setCreateDate(rs.getDate(5));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the sm_tb_leave_attchement table on a SmTbLeaveAttchementBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting SmTbLeaveAttchementBean pObject
     */
    //73
    public SmTbLeaveAttchementBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        SmTbLeaveAttchementBean pObject = createSmTbLeaveAttchementBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_APPLY_ID:
                    ++pos;
                    pObject.setApplyId(Manager.getLong(rs, pos));
                    break;
                case ID_FILE_PATH:
                    ++pos;
                    pObject.setFilePath(rs.getString(pos));
                    break;
                case ID_FILE_NAME:
                    ++pos;
                    pObject.setFileName(rs.getString(pos));
                    break;
                case ID_DESCRIPTION:
                    ++pos;
                    pObject.setDescription(rs.getString(pos));
                    break;
                case ID_CREATE_DATE:
                    ++pos;
                    pObject.setCreateDate(rs.getDate(pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of SmTbLeaveAttchementBean
     */
    //41
    public SmTbLeaveAttchementBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of SmTbLeaveAttchementBean
     */
    public SmTbLeaveAttchementBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        return loadByPreparedStatement(ps, fieldList, 1, -1);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of SmTbLeaveAttchementBean
     */
    //41.5
    public SmTbLeaveAttchementBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            int count = 0;
            if (rs.absolute(startRow) && numRows!=0) {
                do
                {
                    if(fieldList == null)
                        v.add(decodeRow(rs));
                    else
                        v.add(decodeRow(rs, fieldList));
                    count++;
                } while ( (count<numRows||numRows<0) && rs.next() );
            }
            return (SmTbLeaveAttchementBean[])v.toArray(new SmTbLeaveAttchementBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER
    ///////////////////////////////////////////////////////////////////////
    private SmTbLeaveAttchementListener listener = null;

    /**
     * Registers a unique SmTbLeaveAttchementListener listener.
     */
    //66.5
    public void registerListener(SmTbLeaveAttchementListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the SmTbLeaveAttchementBean pObject.
     *
     * @param pObject the SmTbLeaveAttchementBean pObject to be saved
     */
    //67
    void beforeInsert(SmTbLeaveAttchementBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the SmTbLeaveAttchementBean pObject.
     *
     * @param pObject the SmTbLeaveAttchementBean pObject to be saved
     */
    //68
    void afterInsert(SmTbLeaveAttchementBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the SmTbLeaveAttchementBean pObject.
     *
     * @param pObject the SmTbLeaveAttchementBean pObject to be updated
     */
    //69
    void beforeUpdate(SmTbLeaveAttchementBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the SmTbLeaveAttchementBean pObject.
     *
     * @param pObject the SmTbLeaveAttchementBean pObject to be updated
     */
    //70
    void afterUpdate(SmTbLeaveAttchementBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 
}
