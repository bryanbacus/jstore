// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.shenming.sms.dc.sql2java;

import java.util.Comparator;
// imports+ 

// imports- 

/**
 * Comparator class is used to sort the SmTbWeekDiscountBean objects.
 */
public class SmTbWeekDiscountComparator implements Comparator
// extends+ 

// extends- 
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for SmTbWeekDiscountComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new SmTbWeekDiscountComparator(SmTbWeekDiscountManager.DIS_SEQ, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>SmTbWeekDiscountManager.ID_DIS_SEQ
     *   <li>SmTbWeekDiscountManager.ID_PRD_ID
     *   <li>SmTbWeekDiscountManager.ID_DIS_PRICE
     *   <li>SmTbWeekDiscountManager.ID_PRD_TOTAL
     *   <li>SmTbWeekDiscountManager.ID_PRD_CURRENT_TOTAL
     *   <li>SmTbWeekDiscountManager.ID_START_DATE
     *   <li>SmTbWeekDiscountManager.ID_END_DATE
     * </ul>
     */
    public SmTbWeekDiscountComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for SmTbWeekDiscountComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new SmTbWeekDiscountComparator(SmTbWeekDiscountManager.DIS_SEQ, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>SmTbWeekDiscountManager.ID_DIS_SEQ
     *   <li>SmTbWeekDiscountManager.ID_PRD_ID
     *   <li>SmTbWeekDiscountManager.ID_DIS_PRICE
     *   <li>SmTbWeekDiscountManager.ID_PRD_TOTAL
     *   <li>SmTbWeekDiscountManager.ID_PRD_CURRENT_TOTAL
     *   <li>SmTbWeekDiscountManager.ID_START_DATE
     *   <li>SmTbWeekDiscountManager.ID_END_DATE
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public SmTbWeekDiscountComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        SmTbWeekDiscountBean b1 = (SmTbWeekDiscountBean)pObj1;
        SmTbWeekDiscountBean b2 = (SmTbWeekDiscountBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case SmTbWeekDiscountManager.ID_DIS_SEQ:
                if (b1.getDisSeq() == null && b2.getDisSeq() != null) {
                    iReturn = -1;
                } else if (b1.getDisSeq() == null && b2.getDisSeq() == null) {
                    iReturn = 0;
                } else if (b1.getDisSeq() != null && b2.getDisSeq() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getDisSeq().compareTo(b2.getDisSeq());
                }
                break;
            case SmTbWeekDiscountManager.ID_PRD_ID:
                if (b1.getPrdId() == null && b2.getPrdId() != null) {
                    iReturn = -1;
                } else if (b1.getPrdId() == null && b2.getPrdId() == null) {
                    iReturn = 0;
                } else if (b1.getPrdId() != null && b2.getPrdId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getPrdId().compareTo(b2.getPrdId());
                }
                break;
            case SmTbWeekDiscountManager.ID_DIS_PRICE:
                if (b1.getDisPrice() == null && b2.getDisPrice() != null) {
                    iReturn = -1;
                } else if (b1.getDisPrice() == null && b2.getDisPrice() == null) {
                    iReturn = 0;
                } else if (b1.getDisPrice() != null && b2.getDisPrice() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getDisPrice().compareTo(b2.getDisPrice());
                }
                break;
            case SmTbWeekDiscountManager.ID_PRD_TOTAL:
                if (b1.getPrdTotal() == null && b2.getPrdTotal() != null) {
                    iReturn = -1;
                } else if (b1.getPrdTotal() == null && b2.getPrdTotal() == null) {
                    iReturn = 0;
                } else if (b1.getPrdTotal() != null && b2.getPrdTotal() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getPrdTotal().compareTo(b2.getPrdTotal());
                }
                break;
            case SmTbWeekDiscountManager.ID_PRD_CURRENT_TOTAL:
                if (b1.getPrdCurrentTotal() == null && b2.getPrdCurrentTotal() != null) {
                    iReturn = -1;
                } else if (b1.getPrdCurrentTotal() == null && b2.getPrdCurrentTotal() == null) {
                    iReturn = 0;
                } else if (b1.getPrdCurrentTotal() != null && b2.getPrdCurrentTotal() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getPrdCurrentTotal().compareTo(b2.getPrdCurrentTotal());
                }
                break;
            case SmTbWeekDiscountManager.ID_START_DATE:
                if (b1.getStartDate() == null && b2.getStartDate() != null) {
                    iReturn = -1;
                } else if (b1.getStartDate() == null && b2.getStartDate() == null) {
                    iReturn = 0;
                } else if (b1.getStartDate() != null && b2.getStartDate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getStartDate().compareTo(b2.getStartDate());
                }
                break;
            case SmTbWeekDiscountManager.ID_END_DATE:
                if (b1.getEndDate() == null && b2.getEndDate() != null) {
                    iReturn = -1;
                } else if (b1.getEndDate() == null && b2.getEndDate() == null) {
                    iReturn = 0;
                } else if (b1.getEndDate() != null && b2.getEndDate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getEndDate().compareTo(b2.getEndDate());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
// class+ 

// class- 
}
