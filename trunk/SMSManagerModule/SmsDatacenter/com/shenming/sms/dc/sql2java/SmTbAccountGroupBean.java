// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.shenming.sms.dc.sql2java;

// imports+ 

// imports- 

/**
 * SmTbAccountGroupBean is a mapping of sm_tb_account_group Table.
*/
public class SmTbAccountGroupBean
// extends+ 

// extends- 
{

    private String roleType;
    private boolean roleType_is_modified = false;
    private boolean roleType_is_initialized = false;


    private Long userId;
    private boolean userId_is_modified = false;
    private boolean userId_is_initialized = false;


    private String description;
    private boolean description_is_modified = false;
    private boolean description_is_initialized = false;

    private boolean _isNew = true;

    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    SmTbAccountGroupBean()
    {
    }

    /**
     * Getter method for roleType.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_tb_account_group.role_type
     * <li>column size: 20
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of roleType
     */
    public String getRoleType()
    {
        return roleType;
    }

    /**
     * Setter method for roleType.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to roleType
     */
    public void setRoleType(String newVal) {
        if ((newVal != null && this.roleType != null && (newVal.compareTo(this.roleType) == 0)) ||
            (newVal == null && this.roleType == null && roleType_is_initialized)) {
            return;
        }
        this.roleType = newVal;
        roleType_is_modified = true;
        roleType_is_initialized = true;
    }

    /**
     * Determines if the roleType has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRoleTypeModified() {
        return roleType_is_modified;
    }

    /**
     * Determines if the roleType has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRoleTypeInitialized() {
        return roleType_is_initialized;
    }

    /**
     * Getter method for userId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_tb_account_group.user_id
     * <li>column size: 22
     * <li>jdbc type returned by the driver: Types.DECIMAL
     * </ul>
     *
     * @return the value of userId
     */
    public Long getUserId()
    {
        return userId;
    }

    /**
     * Setter method for userId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to userId
     */
    public void setUserId(Long newVal) {
        if ((newVal != null && this.userId != null && (newVal.compareTo(this.userId) == 0)) ||
            (newVal == null && this.userId == null && userId_is_initialized)) {
            return;
        }
        this.userId = newVal;
        userId_is_modified = true;
        userId_is_initialized = true;
    }

    /**
     * Setter method for userId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to userId
     */
    public void setUserId(long newVal) {
        setUserId(new Long(newVal));
    }

    /**
     * Determines if the userId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isUserIdModified() {
        return userId_is_modified;
    }

    /**
     * Determines if the userId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isUserIdInitialized() {
        return userId_is_initialized;
    }

    /**
     * Getter method for description.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_tb_account_group.description
     * <li>column size: 200
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of description
     */
    public String getDescription()
    {
        return description;
    }

    /**
     * Setter method for description.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to description
     */
    public void setDescription(String newVal) {
        if ((newVal != null && this.description != null && (newVal.compareTo(this.description) == 0)) ||
            (newVal == null && this.description == null && description_is_initialized)) {
            return;
        }
        this.description = newVal;
        description_is_modified = true;
        description_is_initialized = true;
    }

    /**
     * Determines if the description has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDescriptionModified() {
        return description_is_modified;
    }

    /**
     * Determines if the description has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDescriptionInitialized() {
        return description_is_initialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return roleType_is_modified ||
		userId_is_modified ||
		description_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        roleType_is_modified = false;
        userId_is_modified = false;
        description_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(SmTbAccountGroupBean bean) {
        setRoleType(bean.getRoleType());
        setUserId(bean.getUserId());
        setDescription(bean.getDescription());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[sm_tb_account_group] "
                 + "\n - sm_tb_account_group.role_type = " + (roleType_is_initialized ? ("[" + (roleType == null ? null : roleType.toString()) + "]") : "not initialized") + ""
                 + "\n - sm_tb_account_group.user_id = " + (userId_is_initialized ? ("[" + (userId == null ? null : userId.toString()) + "]") : "not initialized") + ""
                 + "\n - sm_tb_account_group.description = " + (description_is_initialized ? ("[" + (description == null ? null : description.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
