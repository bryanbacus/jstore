// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.shenming.sms.dc.sql2java;

// imports+ 

// imports- 

/**
 * SmVwAccountSattlementBean is a mapping of sm_vw_account_sattlement Table.
*/
public class SmVwAccountSattlementBean
// extends+ 

// extends- 
{

    private Long smVipSeq;
    private boolean smVipSeq_is_modified = false;
    private boolean smVipSeq_is_initialized = false;


    private String username;
    private boolean username_is_modified = false;
    private boolean username_is_initialized = false;


    private String vipChtName;
    private boolean vipChtName_is_modified = false;
    private boolean vipChtName_is_initialized = false;


    private Long paySum;
    private boolean paySum_is_modified = false;
    private boolean paySum_is_initialized = false;


    private Long buySum;
    private boolean buySum_is_modified = false;
    private boolean buySum_is_initialized = false;


    private Long settlement;
    private boolean settlement_is_modified = false;
    private boolean settlement_is_initialized = false;

    private boolean _isNew = true;

    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    SmVwAccountSattlementBean()
    {
    }

    /**
     * Getter method for smVipSeq.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_vw_account_sattlement.sm_vip_seq
     * <li>column size: 22
     * <li>jdbc type returned by the driver: Types.DECIMAL
     * </ul>
     *
     * @return the value of smVipSeq
     */
    public Long getSmVipSeq()
    {
        return smVipSeq;
    }

    /**
     * Setter method for smVipSeq.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to smVipSeq
     */
    public void setSmVipSeq(Long newVal) {
        if ((newVal != null && this.smVipSeq != null && (newVal.compareTo(this.smVipSeq) == 0)) ||
            (newVal == null && this.smVipSeq == null && smVipSeq_is_initialized)) {
            return;
        }
        this.smVipSeq = newVal;
        smVipSeq_is_modified = true;
        smVipSeq_is_initialized = true;
    }

    /**
     * Setter method for smVipSeq.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to smVipSeq
     */
    public void setSmVipSeq(long newVal) {
        setSmVipSeq(new Long(newVal));
    }

    /**
     * Determines if the smVipSeq has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSmVipSeqModified() {
        return smVipSeq_is_modified;
    }

    /**
     * Determines if the smVipSeq has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSmVipSeqInitialized() {
        return smVipSeq_is_initialized;
    }

    /**
     * Getter method for username.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_vw_account_sattlement.username
     * <li>column size: 50
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of username
     */
    public String getUsername()
    {
        return username;
    }

    /**
     * Setter method for username.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to username
     */
    public void setUsername(String newVal) {
        if ((newVal != null && this.username != null && (newVal.compareTo(this.username) == 0)) ||
            (newVal == null && this.username == null && username_is_initialized)) {
            return;
        }
        this.username = newVal;
        username_is_modified = true;
        username_is_initialized = true;
    }

    /**
     * Determines if the username has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isUsernameModified() {
        return username_is_modified;
    }

    /**
     * Determines if the username has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isUsernameInitialized() {
        return username_is_initialized;
    }

    /**
     * Getter method for vipChtName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_vw_account_sattlement.vip_cht_name
     * <li>column size: 50
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of vipChtName
     */
    public String getVipChtName()
    {
        return vipChtName;
    }

    /**
     * Setter method for vipChtName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to vipChtName
     */
    public void setVipChtName(String newVal) {
        if ((newVal != null && this.vipChtName != null && (newVal.compareTo(this.vipChtName) == 0)) ||
            (newVal == null && this.vipChtName == null && vipChtName_is_initialized)) {
            return;
        }
        this.vipChtName = newVal;
        vipChtName_is_modified = true;
        vipChtName_is_initialized = true;
    }

    /**
     * Determines if the vipChtName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isVipChtNameModified() {
        return vipChtName_is_modified;
    }

    /**
     * Determines if the vipChtName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isVipChtNameInitialized() {
        return vipChtName_is_initialized;
    }

    /**
     * Getter method for paySum.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_vw_account_sattlement.pay_sum
     * <li>column size: 32
     * <li>jdbc type returned by the driver: Types.DECIMAL
     * </ul>
     *
     * @return the value of paySum
     */
    public Long getPaySum()
    {
        return paySum;
    }

    /**
     * Setter method for paySum.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to paySum
     */
    public void setPaySum(Long newVal) {
        if ((newVal != null && this.paySum != null && (newVal.compareTo(this.paySum) == 0)) ||
            (newVal == null && this.paySum == null && paySum_is_initialized)) {
            return;
        }
        this.paySum = newVal;
        paySum_is_modified = true;
        paySum_is_initialized = true;
    }

    /**
     * Setter method for paySum.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to paySum
     */
    public void setPaySum(long newVal) {
        setPaySum(new Long(newVal));
    }

    /**
     * Determines if the paySum has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPaySumModified() {
        return paySum_is_modified;
    }

    /**
     * Determines if the paySum has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPaySumInitialized() {
        return paySum_is_initialized;
    }

    /**
     * Getter method for buySum.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_vw_account_sattlement.buy_sum
     * <li>column size: 22
     * <li>jdbc type returned by the driver: Types.DECIMAL
     * </ul>
     *
     * @return the value of buySum
     */
    public Long getBuySum()
    {
        return buySum;
    }

    /**
     * Setter method for buySum.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to buySum
     */
    public void setBuySum(Long newVal) {
        if ((newVal != null && this.buySum != null && (newVal.compareTo(this.buySum) == 0)) ||
            (newVal == null && this.buySum == null && buySum_is_initialized)) {
            return;
        }
        this.buySum = newVal;
        buySum_is_modified = true;
        buySum_is_initialized = true;
    }

    /**
     * Setter method for buySum.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to buySum
     */
    public void setBuySum(long newVal) {
        setBuySum(new Long(newVal));
    }

    /**
     * Determines if the buySum has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBuySumModified() {
        return buySum_is_modified;
    }

    /**
     * Determines if the buySum has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBuySumInitialized() {
        return buySum_is_initialized;
    }

    /**
     * Getter method for settlement.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_vw_account_sattlement.settlement
     * <li>column size: 33
     * <li>jdbc type returned by the driver: Types.DECIMAL
     * </ul>
     *
     * @return the value of settlement
     */
    public Long getSettlement()
    {
        return settlement;
    }

    /**
     * Setter method for settlement.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to settlement
     */
    public void setSettlement(Long newVal) {
        if ((newVal != null && this.settlement != null && (newVal.compareTo(this.settlement) == 0)) ||
            (newVal == null && this.settlement == null && settlement_is_initialized)) {
            return;
        }
        this.settlement = newVal;
        settlement_is_modified = true;
        settlement_is_initialized = true;
    }

    /**
     * Setter method for settlement.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to settlement
     */
    public void setSettlement(long newVal) {
        setSettlement(new Long(newVal));
    }

    /**
     * Determines if the settlement has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSettlementModified() {
        return settlement_is_modified;
    }

    /**
     * Determines if the settlement has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSettlementInitialized() {
        return settlement_is_initialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return smVipSeq_is_modified ||
		username_is_modified ||
		vipChtName_is_modified ||
		paySum_is_modified ||
		buySum_is_modified ||
		settlement_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        smVipSeq_is_modified = false;
        username_is_modified = false;
        vipChtName_is_modified = false;
        paySum_is_modified = false;
        buySum_is_modified = false;
        settlement_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(SmVwAccountSattlementBean bean) {
        setSmVipSeq(bean.getSmVipSeq());
        setUsername(bean.getUsername());
        setVipChtName(bean.getVipChtName());
        setPaySum(bean.getPaySum());
        setBuySum(bean.getBuySum());
        setSettlement(bean.getSettlement());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[sm_vw_account_sattlement] "
                 + "\n - sm_vw_account_sattlement.sm_vip_seq = " + (smVipSeq_is_initialized ? ("[" + (smVipSeq == null ? null : smVipSeq.toString()) + "]") : "not initialized") + ""
                 + "\n - sm_vw_account_sattlement.username = " + (username_is_initialized ? ("[" + (username == null ? null : username.toString()) + "]") : "not initialized") + ""
                 + "\n - sm_vw_account_sattlement.vip_cht_name = " + (vipChtName_is_initialized ? ("[" + (vipChtName == null ? null : vipChtName.toString()) + "]") : "not initialized") + ""
                 + "\n - sm_vw_account_sattlement.pay_sum = " + (paySum_is_initialized ? ("[" + (paySum == null ? null : paySum.toString()) + "]") : "not initialized") + ""
                 + "\n - sm_vw_account_sattlement.buy_sum = " + (buySum_is_initialized ? ("[" + (buySum == null ? null : buySum.toString()) + "]") : "not initialized") + ""
                 + "\n - sm_vw_account_sattlement.settlement = " + (settlement_is_initialized ? ("[" + (settlement == null ? null : settlement.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
