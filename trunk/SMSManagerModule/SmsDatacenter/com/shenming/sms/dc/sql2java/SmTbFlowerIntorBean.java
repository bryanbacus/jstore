// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.shenming.sms.dc.sql2java;

// imports+ 

// imports- 

/**
 * SmTbFlowerIntorBean is a mapping of sm_tb_flower_intor Table.
*/
public class SmTbFlowerIntorBean
// extends+ 

// extends- 
{

    private Long itemSeq;
    private boolean itemSeq_is_modified = false;
    private boolean itemSeq_is_initialized = false;


    private String title;
    private boolean title_is_modified = false;
    private boolean title_is_initialized = false;


    private String itemCharacter;
    private boolean itemCharacter_is_modified = false;
    private boolean itemCharacter_is_initialized = false;


    private String usages;
    private boolean usages_is_modified = false;
    private boolean usages_is_initialized = false;


    private String description;
    private boolean description_is_modified = false;
    private boolean description_is_initialized = false;


    private String itemPics;
    private boolean itemPics_is_modified = false;
    private boolean itemPics_is_initialized = false;


    private String isShow;
    private boolean isShow_is_modified = false;
    private boolean isShow_is_initialized = false;

    private boolean _isNew = true;

    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    SmTbFlowerIntorBean()
    {
    }

    /**
     * Getter method for itemSeq.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_tb_flower_intor.item_seq
     * <li>column size: 22
     * <li>jdbc type returned by the driver: Types.DECIMAL
     * </ul>
     *
     * @return the value of itemSeq
     */
    public Long getItemSeq()
    {
        return itemSeq;
    }

    /**
     * Setter method for itemSeq.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to itemSeq
     */
    public void setItemSeq(Long newVal) {
        if ((newVal != null && this.itemSeq != null && (newVal.compareTo(this.itemSeq) == 0)) ||
            (newVal == null && this.itemSeq == null && itemSeq_is_initialized)) {
            return;
        }
        this.itemSeq = newVal;
        itemSeq_is_modified = true;
        itemSeq_is_initialized = true;
    }

    /**
     * Setter method for itemSeq.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to itemSeq
     */
    public void setItemSeq(long newVal) {
        setItemSeq(new Long(newVal));
    }

    /**
     * Determines if the itemSeq has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isItemSeqModified() {
        return itemSeq_is_modified;
    }

    /**
     * Determines if the itemSeq has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isItemSeqInitialized() {
        return itemSeq_is_initialized;
    }

    /**
     * Getter method for title.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_tb_flower_intor.title
     * <li>column size: 50
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of title
     */
    public String getTitle()
    {
        return title;
    }

    /**
     * Setter method for title.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to title
     */
    public void setTitle(String newVal) {
        if ((newVal != null && this.title != null && (newVal.compareTo(this.title) == 0)) ||
            (newVal == null && this.title == null && title_is_initialized)) {
            return;
        }
        this.title = newVal;
        title_is_modified = true;
        title_is_initialized = true;
    }

    /**
     * Determines if the title has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTitleModified() {
        return title_is_modified;
    }

    /**
     * Determines if the title has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTitleInitialized() {
        return title_is_initialized;
    }

    /**
     * Getter method for itemCharacter.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_tb_flower_intor.item_character
     * <li>column size: 50
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of itemCharacter
     */
    public String getItemCharacter()
    {
        return itemCharacter;
    }

    /**
     * Setter method for itemCharacter.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to itemCharacter
     */
    public void setItemCharacter(String newVal) {
        if ((newVal != null && this.itemCharacter != null && (newVal.compareTo(this.itemCharacter) == 0)) ||
            (newVal == null && this.itemCharacter == null && itemCharacter_is_initialized)) {
            return;
        }
        this.itemCharacter = newVal;
        itemCharacter_is_modified = true;
        itemCharacter_is_initialized = true;
    }

    /**
     * Determines if the itemCharacter has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isItemCharacterModified() {
        return itemCharacter_is_modified;
    }

    /**
     * Determines if the itemCharacter has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isItemCharacterInitialized() {
        return itemCharacter_is_initialized;
    }

    /**
     * Getter method for usages.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_tb_flower_intor.usages
     * <li>column size: 50
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of usages
     */
    public String getUsages()
    {
        return usages;
    }

    /**
     * Setter method for usages.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to usages
     */
    public void setUsages(String newVal) {
        if ((newVal != null && this.usages != null && (newVal.compareTo(this.usages) == 0)) ||
            (newVal == null && this.usages == null && usages_is_initialized)) {
            return;
        }
        this.usages = newVal;
        usages_is_modified = true;
        usages_is_initialized = true;
    }

    /**
     * Determines if the usages has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isUsagesModified() {
        return usages_is_modified;
    }

    /**
     * Determines if the usages has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isUsagesInitialized() {
        return usages_is_initialized;
    }

    /**
     * Getter method for description.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_tb_flower_intor.description
     * <li>column size: 500
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of description
     */
    public String getDescription()
    {
        return description;
    }

    /**
     * Setter method for description.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to description
     */
    public void setDescription(String newVal) {
        if ((newVal != null && this.description != null && (newVal.compareTo(this.description) == 0)) ||
            (newVal == null && this.description == null && description_is_initialized)) {
            return;
        }
        this.description = newVal;
        description_is_modified = true;
        description_is_initialized = true;
    }

    /**
     * Determines if the description has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDescriptionModified() {
        return description_is_modified;
    }

    /**
     * Determines if the description has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDescriptionInitialized() {
        return description_is_initialized;
    }

    /**
     * Getter method for itemPics.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_tb_flower_intor.item_pics
     * <li>column size: 200
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of itemPics
     */
    public String getItemPics()
    {
        return itemPics;
    }

    /**
     * Setter method for itemPics.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to itemPics
     */
    public void setItemPics(String newVal) {
        if ((newVal != null && this.itemPics != null && (newVal.compareTo(this.itemPics) == 0)) ||
            (newVal == null && this.itemPics == null && itemPics_is_initialized)) {
            return;
        }
        this.itemPics = newVal;
        itemPics_is_modified = true;
        itemPics_is_initialized = true;
    }

    /**
     * Determines if the itemPics has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isItemPicsModified() {
        return itemPics_is_modified;
    }

    /**
     * Determines if the itemPics has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isItemPicsInitialized() {
        return itemPics_is_initialized;
    }

    /**
     * Getter method for isShow.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_tb_flower_intor.is_show
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of isShow
     */
    public String getIsShow()
    {
        return isShow;
    }

    /**
     * Setter method for isShow.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to isShow
     */
    public void setIsShow(String newVal) {
        if ((newVal != null && this.isShow != null && (newVal.compareTo(this.isShow) == 0)) ||
            (newVal == null && this.isShow == null && isShow_is_initialized)) {
            return;
        }
        this.isShow = newVal;
        isShow_is_modified = true;
        isShow_is_initialized = true;
    }

    /**
     * Determines if the isShow has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isIsShowModified() {
        return isShow_is_modified;
    }

    /**
     * Determines if the isShow has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isIsShowInitialized() {
        return isShow_is_initialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return itemSeq_is_modified ||
		title_is_modified ||
		itemCharacter_is_modified ||
		usages_is_modified ||
		description_is_modified ||
		itemPics_is_modified ||
		isShow_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        itemSeq_is_modified = false;
        title_is_modified = false;
        itemCharacter_is_modified = false;
        usages_is_modified = false;
        description_is_modified = false;
        itemPics_is_modified = false;
        isShow_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(SmTbFlowerIntorBean bean) {
        setItemSeq(bean.getItemSeq());
        setTitle(bean.getTitle());
        setItemCharacter(bean.getItemCharacter());
        setUsages(bean.getUsages());
        setDescription(bean.getDescription());
        setItemPics(bean.getItemPics());
        setIsShow(bean.getIsShow());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[sm_tb_flower_intor] "
                 + "\n - sm_tb_flower_intor.item_seq = " + (itemSeq_is_initialized ? ("[" + (itemSeq == null ? null : itemSeq.toString()) + "]") : "not initialized") + ""
                 + "\n - sm_tb_flower_intor.title = " + (title_is_initialized ? ("[" + (title == null ? null : title.toString()) + "]") : "not initialized") + ""
                 + "\n - sm_tb_flower_intor.item_character = " + (itemCharacter_is_initialized ? ("[" + (itemCharacter == null ? null : itemCharacter.toString()) + "]") : "not initialized") + ""
                 + "\n - sm_tb_flower_intor.usages = " + (usages_is_initialized ? ("[" + (usages == null ? null : usages.toString()) + "]") : "not initialized") + ""
                 + "\n - sm_tb_flower_intor.description = " + (description_is_initialized ? ("[" + (description == null ? null : description.toString()) + "]") : "not initialized") + ""
                 + "\n - sm_tb_flower_intor.item_pics = " + (itemPics_is_initialized ? ("[" + (itemPics == null ? null : itemPics.toString()) + "]") : "not initialized") + ""
                 + "\n - sm_tb_flower_intor.is_show = " + (isShow_is_initialized ? ("[" + (isShow == null ? null : isShow.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
