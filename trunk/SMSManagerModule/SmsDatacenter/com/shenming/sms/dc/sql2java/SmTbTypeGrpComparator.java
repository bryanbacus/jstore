// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.shenming.sms.dc.sql2java;

import java.util.Comparator;
// imports+ 

// imports- 

/**
 * Comparator class is used to sort the SmTbTypeGrpBean objects.
 */
public class SmTbTypeGrpComparator implements Comparator
// extends+ 

// extends- 
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for SmTbTypeGrpComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new SmTbTypeGrpComparator(SmTbTypeGrpManager.PRD_TYPE_ID, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>SmTbTypeGrpManager.ID_PRD_TYPE_ID
     *   <li>SmTbTypeGrpManager.ID_PRD_TYPE_NAME
     *   <li>SmTbTypeGrpManager.ID_PRD_TYPE_DESC
     *   <li>SmTbTypeGrpManager.ID_PRD_TYPE_DISCOUNT
     *   <li>SmTbTypeGrpManager.ID_OWNER
     * </ul>
     */
    public SmTbTypeGrpComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for SmTbTypeGrpComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new SmTbTypeGrpComparator(SmTbTypeGrpManager.PRD_TYPE_ID, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>SmTbTypeGrpManager.ID_PRD_TYPE_ID
     *   <li>SmTbTypeGrpManager.ID_PRD_TYPE_NAME
     *   <li>SmTbTypeGrpManager.ID_PRD_TYPE_DESC
     *   <li>SmTbTypeGrpManager.ID_PRD_TYPE_DISCOUNT
     *   <li>SmTbTypeGrpManager.ID_OWNER
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public SmTbTypeGrpComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        SmTbTypeGrpBean b1 = (SmTbTypeGrpBean)pObj1;
        SmTbTypeGrpBean b2 = (SmTbTypeGrpBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case SmTbTypeGrpManager.ID_PRD_TYPE_ID:
                if (b1.getPrdTypeId() == null && b2.getPrdTypeId() != null) {
                    iReturn = -1;
                } else if (b1.getPrdTypeId() == null && b2.getPrdTypeId() == null) {
                    iReturn = 0;
                } else if (b1.getPrdTypeId() != null && b2.getPrdTypeId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getPrdTypeId().compareTo(b2.getPrdTypeId());
                }
                break;
            case SmTbTypeGrpManager.ID_PRD_TYPE_NAME:
                if (b1.getPrdTypeName() == null && b2.getPrdTypeName() != null) {
                    iReturn = -1;
                } else if (b1.getPrdTypeName() == null && b2.getPrdTypeName() == null) {
                    iReturn = 0;
                } else if (b1.getPrdTypeName() != null && b2.getPrdTypeName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getPrdTypeName().compareTo(b2.getPrdTypeName());
                }
                break;
            case SmTbTypeGrpManager.ID_PRD_TYPE_DESC:
                if (b1.getPrdTypeDesc() == null && b2.getPrdTypeDesc() != null) {
                    iReturn = -1;
                } else if (b1.getPrdTypeDesc() == null && b2.getPrdTypeDesc() == null) {
                    iReturn = 0;
                } else if (b1.getPrdTypeDesc() != null && b2.getPrdTypeDesc() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getPrdTypeDesc().compareTo(b2.getPrdTypeDesc());
                }
                break;
            case SmTbTypeGrpManager.ID_PRD_TYPE_DISCOUNT:
                if (b1.getPrdTypeDiscount() == null && b2.getPrdTypeDiscount() != null) {
                    iReturn = -1;
                } else if (b1.getPrdTypeDiscount() == null && b2.getPrdTypeDiscount() == null) {
                    iReturn = 0;
                } else if (b1.getPrdTypeDiscount() != null && b2.getPrdTypeDiscount() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getPrdTypeDiscount().compareTo(b2.getPrdTypeDiscount());
                }
                break;
            case SmTbTypeGrpManager.ID_OWNER:
                if (b1.getOwner() == null && b2.getOwner() != null) {
                    iReturn = -1;
                } else if (b1.getOwner() == null && b2.getOwner() == null) {
                    iReturn = 0;
                } else if (b1.getOwner() != null && b2.getOwner() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getOwner().compareTo(b2.getOwner());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
// class+ 

// class- 
}
