// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.shenming.sms.dc.sql2java;

// imports+ 

// imports- 

/**
 * SmTbSaleRecordBean is a mapping of sm_tb_sale_record Table.
*/
public class SmTbSaleRecordBean
// extends+ 

// extends- 
{

    private Long saleSeq;
    private boolean saleSeq_is_modified = false;
    private boolean saleSeq_is_initialized = false;


    private Long saleTotal;
    private boolean saleTotal_is_modified = false;
    private boolean saleTotal_is_initialized = false;


    private java.util.Date saleDate;
    private boolean saleDate_is_modified = false;
    private boolean saleDate_is_initialized = false;


    private Long vipId;
    private boolean vipId_is_modified = false;
    private boolean vipId_is_initialized = false;


    private Long salesId;
    private boolean salesId_is_modified = false;
    private boolean salesId_is_initialized = false;

    private boolean _isNew = true;

    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    SmTbSaleRecordBean()
    {
    }

    /**
     * Getter method for saleSeq.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_tb_sale_record.sale_seq
     * <li>column size: 22
     * <li>jdbc type returned by the driver: Types.DECIMAL
     * </ul>
     *
     * @return the value of saleSeq
     */
    public Long getSaleSeq()
    {
        return saleSeq;
    }

    /**
     * Setter method for saleSeq.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to saleSeq
     */
    public void setSaleSeq(Long newVal) {
        if ((newVal != null && this.saleSeq != null && (newVal.compareTo(this.saleSeq) == 0)) ||
            (newVal == null && this.saleSeq == null && saleSeq_is_initialized)) {
            return;
        }
        this.saleSeq = newVal;
        saleSeq_is_modified = true;
        saleSeq_is_initialized = true;
    }

    /**
     * Setter method for saleSeq.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to saleSeq
     */
    public void setSaleSeq(long newVal) {
        setSaleSeq(new Long(newVal));
    }

    /**
     * Determines if the saleSeq has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSaleSeqModified() {
        return saleSeq_is_modified;
    }

    /**
     * Determines if the saleSeq has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSaleSeqInitialized() {
        return saleSeq_is_initialized;
    }

    /**
     * Getter method for saleTotal.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_tb_sale_record.sale_total
     * <li>column size: 22
     * <li>jdbc type returned by the driver: Types.DECIMAL
     * </ul>
     *
     * @return the value of saleTotal
     */
    public Long getSaleTotal()
    {
        return saleTotal;
    }

    /**
     * Setter method for saleTotal.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to saleTotal
     */
    public void setSaleTotal(Long newVal) {
        if ((newVal != null && this.saleTotal != null && (newVal.compareTo(this.saleTotal) == 0)) ||
            (newVal == null && this.saleTotal == null && saleTotal_is_initialized)) {
            return;
        }
        this.saleTotal = newVal;
        saleTotal_is_modified = true;
        saleTotal_is_initialized = true;
    }

    /**
     * Setter method for saleTotal.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to saleTotal
     */
    public void setSaleTotal(long newVal) {
        setSaleTotal(new Long(newVal));
    }

    /**
     * Determines if the saleTotal has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSaleTotalModified() {
        return saleTotal_is_modified;
    }

    /**
     * Determines if the saleTotal has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSaleTotalInitialized() {
        return saleTotal_is_initialized;
    }

    /**
     * Getter method for saleDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_tb_sale_record.sale_date
     * <li>column size: 0
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of saleDate
     */
    public java.util.Date getSaleDate()
    {
        return saleDate;
    }

    /**
     * Setter method for saleDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to saleDate
     */
    public void setSaleDate(java.util.Date newVal) {
        if ((newVal != null && this.saleDate != null && (newVal.compareTo(this.saleDate) == 0)) ||
            (newVal == null && this.saleDate == null && saleDate_is_initialized)) {
            return;
        }
        this.saleDate = newVal;
        saleDate_is_modified = true;
        saleDate_is_initialized = true;
    }

    /**
     * Setter method for saleDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to saleDate
     */
    public void setSaleDate(long newVal) {
        setSaleDate(new java.util.Date(newVal));
    }

    /**
     * Determines if the saleDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSaleDateModified() {
        return saleDate_is_modified;
    }

    /**
     * Determines if the saleDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSaleDateInitialized() {
        return saleDate_is_initialized;
    }

    /**
     * Getter method for vipId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_tb_sale_record.vip_id
     * <li>column size: 22
     * <li>jdbc type returned by the driver: Types.DECIMAL
     * </ul>
     *
     * @return the value of vipId
     */
    public Long getVipId()
    {
        return vipId;
    }

    /**
     * Setter method for vipId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to vipId
     */
    public void setVipId(Long newVal) {
        if ((newVal != null && this.vipId != null && (newVal.compareTo(this.vipId) == 0)) ||
            (newVal == null && this.vipId == null && vipId_is_initialized)) {
            return;
        }
        this.vipId = newVal;
        vipId_is_modified = true;
        vipId_is_initialized = true;
    }

    /**
     * Setter method for vipId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to vipId
     */
    public void setVipId(long newVal) {
        setVipId(new Long(newVal));
    }

    /**
     * Determines if the vipId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isVipIdModified() {
        return vipId_is_modified;
    }

    /**
     * Determines if the vipId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isVipIdInitialized() {
        return vipId_is_initialized;
    }

    /**
     * Getter method for salesId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sm_tb_sale_record.sales_id
     * <li>column size: 22
     * <li>jdbc type returned by the driver: Types.DECIMAL
     * </ul>
     *
     * @return the value of salesId
     */
    public Long getSalesId()
    {
        return salesId;
    }

    /**
     * Setter method for salesId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to salesId
     */
    public void setSalesId(Long newVal) {
        if ((newVal != null && this.salesId != null && (newVal.compareTo(this.salesId) == 0)) ||
            (newVal == null && this.salesId == null && salesId_is_initialized)) {
            return;
        }
        this.salesId = newVal;
        salesId_is_modified = true;
        salesId_is_initialized = true;
    }

    /**
     * Setter method for salesId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to salesId
     */
    public void setSalesId(long newVal) {
        setSalesId(new Long(newVal));
    }

    /**
     * Determines if the salesId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSalesIdModified() {
        return salesId_is_modified;
    }

    /**
     * Determines if the salesId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSalesIdInitialized() {
        return salesId_is_initialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return saleSeq_is_modified ||
		saleTotal_is_modified ||
		saleDate_is_modified ||
		vipId_is_modified ||
		salesId_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        saleSeq_is_modified = false;
        saleTotal_is_modified = false;
        saleDate_is_modified = false;
        vipId_is_modified = false;
        salesId_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(SmTbSaleRecordBean bean) {
        setSaleSeq(bean.getSaleSeq());
        setSaleTotal(bean.getSaleTotal());
        setSaleDate(bean.getSaleDate());
        setVipId(bean.getVipId());
        setSalesId(bean.getSalesId());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[sm_tb_sale_record] "
                 + "\n - sm_tb_sale_record.sale_seq = " + (saleSeq_is_initialized ? ("[" + (saleSeq == null ? null : saleSeq.toString()) + "]") : "not initialized") + ""
                 + "\n - sm_tb_sale_record.sale_total = " + (saleTotal_is_initialized ? ("[" + (saleTotal == null ? null : saleTotal.toString()) + "]") : "not initialized") + ""
                 + "\n - sm_tb_sale_record.sale_date = " + (saleDate_is_initialized ? ("[" + (saleDate == null ? null : saleDate.toString()) + "]") : "not initialized") + ""
                 + "\n - sm_tb_sale_record.vip_id = " + (vipId_is_initialized ? ("[" + (vipId == null ? null : vipId.toString()) + "]") : "not initialized") + ""
                 + "\n - sm_tb_sale_record.sales_id = " + (salesId_is_initialized ? ("[" + (salesId == null ? null : salesId.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
