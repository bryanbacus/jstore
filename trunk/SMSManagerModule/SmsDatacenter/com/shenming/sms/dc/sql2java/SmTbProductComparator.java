// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.shenming.sms.dc.sql2java;

import java.util.Comparator;
// imports+ 

// imports- 

/**
 * Comparator class is used to sort the SmTbProductBean objects.
 */
public class SmTbProductComparator implements Comparator
// extends+ 

// extends- 
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for SmTbProductComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new SmTbProductComparator(SmTbProductManager.PRD_ID, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>SmTbProductManager.ID_PRD_ID
     *   <li>SmTbProductManager.ID_PRD_TYPE_ID
     *   <li>SmTbProductManager.ID_NAME
     *   <li>SmTbProductManager.ID_PRICE
     *   <li>SmTbProductManager.ID_PRICE_VIP
     *   <li>SmTbProductManager.ID_SUPLY_STATUS
     *   <li>SmTbProductManager.ID_FORMAT_DESC
     *   <li>SmTbProductManager.ID_DETAIL_DESC
     *   <li>SmTbProductManager.ID_SEND_AREA
     *   <li>SmTbProductManager.ID_SEND_DESC
     *   <li>SmTbProductManager.ID_PRD_PIC_FILE
     *   <li>SmTbProductManager.ID_OWNER
     * </ul>
     */
    public SmTbProductComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for SmTbProductComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new SmTbProductComparator(SmTbProductManager.PRD_ID, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>SmTbProductManager.ID_PRD_ID
     *   <li>SmTbProductManager.ID_PRD_TYPE_ID
     *   <li>SmTbProductManager.ID_NAME
     *   <li>SmTbProductManager.ID_PRICE
     *   <li>SmTbProductManager.ID_PRICE_VIP
     *   <li>SmTbProductManager.ID_SUPLY_STATUS
     *   <li>SmTbProductManager.ID_FORMAT_DESC
     *   <li>SmTbProductManager.ID_DETAIL_DESC
     *   <li>SmTbProductManager.ID_SEND_AREA
     *   <li>SmTbProductManager.ID_SEND_DESC
     *   <li>SmTbProductManager.ID_PRD_PIC_FILE
     *   <li>SmTbProductManager.ID_OWNER
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public SmTbProductComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        SmTbProductBean b1 = (SmTbProductBean)pObj1;
        SmTbProductBean b2 = (SmTbProductBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case SmTbProductManager.ID_PRD_ID:
                if (b1.getPrdId() == null && b2.getPrdId() != null) {
                    iReturn = -1;
                } else if (b1.getPrdId() == null && b2.getPrdId() == null) {
                    iReturn = 0;
                } else if (b1.getPrdId() != null && b2.getPrdId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getPrdId().compareTo(b2.getPrdId());
                }
                break;
            case SmTbProductManager.ID_PRD_TYPE_ID:
                if (b1.getPrdTypeId() == null && b2.getPrdTypeId() != null) {
                    iReturn = -1;
                } else if (b1.getPrdTypeId() == null && b2.getPrdTypeId() == null) {
                    iReturn = 0;
                } else if (b1.getPrdTypeId() != null && b2.getPrdTypeId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getPrdTypeId().compareTo(b2.getPrdTypeId());
                }
                break;
            case SmTbProductManager.ID_NAME:
                if (b1.getName() == null && b2.getName() != null) {
                    iReturn = -1;
                } else if (b1.getName() == null && b2.getName() == null) {
                    iReturn = 0;
                } else if (b1.getName() != null && b2.getName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getName().compareTo(b2.getName());
                }
                break;
            case SmTbProductManager.ID_PRICE:
                if (b1.getPrice() == null && b2.getPrice() != null) {
                    iReturn = -1;
                } else if (b1.getPrice() == null && b2.getPrice() == null) {
                    iReturn = 0;
                } else if (b1.getPrice() != null && b2.getPrice() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getPrice().compareTo(b2.getPrice());
                }
                break;
            case SmTbProductManager.ID_PRICE_VIP:
                if (b1.getPriceVip() == null && b2.getPriceVip() != null) {
                    iReturn = -1;
                } else if (b1.getPriceVip() == null && b2.getPriceVip() == null) {
                    iReturn = 0;
                } else if (b1.getPriceVip() != null && b2.getPriceVip() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getPriceVip().compareTo(b2.getPriceVip());
                }
                break;
            case SmTbProductManager.ID_SUPLY_STATUS:
                if (b1.getSuplyStatus() == null && b2.getSuplyStatus() != null) {
                    iReturn = -1;
                } else if (b1.getSuplyStatus() == null && b2.getSuplyStatus() == null) {
                    iReturn = 0;
                } else if (b1.getSuplyStatus() != null && b2.getSuplyStatus() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getSuplyStatus().compareTo(b2.getSuplyStatus());
                }
                break;
            case SmTbProductManager.ID_FORMAT_DESC:
                if (b1.getFormatDesc() == null && b2.getFormatDesc() != null) {
                    iReturn = -1;
                } else if (b1.getFormatDesc() == null && b2.getFormatDesc() == null) {
                    iReturn = 0;
                } else if (b1.getFormatDesc() != null && b2.getFormatDesc() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getFormatDesc().compareTo(b2.getFormatDesc());
                }
                break;
            case SmTbProductManager.ID_DETAIL_DESC:
                if (b1.getDetailDesc() == null && b2.getDetailDesc() != null) {
                    iReturn = -1;
                } else if (b1.getDetailDesc() == null && b2.getDetailDesc() == null) {
                    iReturn = 0;
                } else if (b1.getDetailDesc() != null && b2.getDetailDesc() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getDetailDesc().compareTo(b2.getDetailDesc());
                }
                break;
            case SmTbProductManager.ID_SEND_AREA:
                if (b1.getSendArea() == null && b2.getSendArea() != null) {
                    iReturn = -1;
                } else if (b1.getSendArea() == null && b2.getSendArea() == null) {
                    iReturn = 0;
                } else if (b1.getSendArea() != null && b2.getSendArea() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getSendArea().compareTo(b2.getSendArea());
                }
                break;
            case SmTbProductManager.ID_SEND_DESC:
                if (b1.getSendDesc() == null && b2.getSendDesc() != null) {
                    iReturn = -1;
                } else if (b1.getSendDesc() == null && b2.getSendDesc() == null) {
                    iReturn = 0;
                } else if (b1.getSendDesc() != null && b2.getSendDesc() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getSendDesc().compareTo(b2.getSendDesc());
                }
                break;
            case SmTbProductManager.ID_PRD_PIC_FILE:
                if (b1.getPrdPicFile() == null && b2.getPrdPicFile() != null) {
                    iReturn = -1;
                } else if (b1.getPrdPicFile() == null && b2.getPrdPicFile() == null) {
                    iReturn = 0;
                } else if (b1.getPrdPicFile() != null && b2.getPrdPicFile() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getPrdPicFile().compareTo(b2.getPrdPicFile());
                }
                break;
            case SmTbProductManager.ID_OWNER:
                if (b1.getOwner() == null && b2.getOwner() != null) {
                    iReturn = -1;
                } else if (b1.getOwner() == null && b2.getOwner() == null) {
                    iReturn = 0;
                } else if (b1.getOwner() != null && b2.getOwner() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getOwner().compareTo(b2.getOwner());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
// class+ 

// class- 
}
